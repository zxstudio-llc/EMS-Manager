{
  "SearchInput": {
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\" | \"linkedin\" | \"facebook\" | \"messenger\" | \"whatsapp\" | \"twitter\" | \"telegram\" | \"primary\" | \"secondary\" | \"indigo\"",
      "required": false,
      "description": "The visual color appearance of the component"
    },
    "errorBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is invalid. Use color keys in `theme.colors`"
    },
    "focusBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is focused. Use color keys in `theme.colors`"
    },
    "htmlSize": {
      "type": "number",
      "required": false,
      "description": "The native HTML `size` attribute to be passed to the `input`"
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "The icon to render before the input text"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "onReset": {
      "type": "() => void",
      "required": false,
      "description": "Callback to trigger when the reset button is clicked or escape key is pressed"
    },
    "placeholder": {
      "type": "string",
      "defaultValue": "Search",
      "required": false,
      "description": "The placeholder text for the input"
    },
    "resetIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "The icon to render in the reset button"
    },
    "rightElement": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Right element rendered when the value is empty"
    },
    "size": {
      "type": "\"sm\" | \"lg\"",
      "required": false,
      "description": "The size of the SearchInput"
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the SearchInput"
    }
  }
}
