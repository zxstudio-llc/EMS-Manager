{
  "Kanban": {
    "asChild": {
      "type": "boolean",
      "required": false,
      "description": "Render as a different element type."
    },
    "cancelDrop": { "type": "CancelDrop", "required": false },
    "children": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: { ...; }) => ReactNode)",
      "required": false
    },
    "coordinateGetter": {
      "type": "KeyboardCoordinateGetter",
      "required": false
    },
    "defaultItems": { "type": "KanbanItems", "required": false },
    "isSortable": { "type": "boolean", "required": false },
    "items": { "type": "KanbanItems", "required": false },
    "modifiers": { "type": "Modifiers", "required": false },
    "onCardDragEnd": { "type": "OnCardDragEndHandler", "required": false },
    "onChange": { "type": "(items: KanbanItems) => void", "required": false },
    "onColumnDragEnd": { "type": "OnColumnDragEndHandler", "required": false },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "required": false
    },
    "strategy": { "type": "SortingStrategy", "required": false }
  },
  "KanbanColumn": {
    "id": { "type": "UniqueIdentifier", "required": true },
    "asChild": {
      "type": "boolean",
      "required": false,
      "description": "Render as a different element type."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "columns": { "type": "number", "required": false },
    "isDisabled": { "type": "boolean", "required": false },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "required": false
    }
  },
  "KanbanColumnDragHandle": {
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"1\" | \"2\" | \"3\" | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"-1\" | \"-2\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between the button icon and label."
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon before the button's label."
    },
    "loadingText": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The label to show in the button when `isLoading` is true\nIf no text is passed, it only shows the spinner"
    },
    "rightIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon after the button's label."
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    },
    "spinnerPlacement": {
      "type": "\"end\" | \"start\"",
      "defaultValue": "start",
      "required": false,
      "description": "It determines the placement of the spinner when isLoading is true"
    }
  },
  "KanbanCard": {
    "id": { "type": "UniqueIdentifier", "required": true },
    "asChild": {
      "type": "boolean",
      "required": false,
      "description": "Render as a different element type."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "isDisabled": { "type": "boolean", "required": false }
  },
  "KanbanAction": {
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"1\" | \"2\" | \"3\" | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"-1\" | \"-2\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between the button icon and label."
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon before the button's label."
    },
    "loadingText": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The label to show in the button when `isLoading` is true\nIf no text is passed, it only shows the spinner"
    },
    "rightIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon after the button's label."
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    },
    "spinnerPlacement": {
      "type": "\"end\" | \"start\"",
      "defaultValue": "start",
      "required": false,
      "description": "It determines the placement of the spinner when isLoading is true"
    }
  },
  "KanbanDragOverlay": {
    "adjustScale": { "type": "boolean", "required": false },
    "appendToParentPortal": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the portal will check if it is within a parent portal\nand append itself to the parent's portal node.\nThis provides nesting for portals.\n\nIf `false`, the portal will always append to `document.body`\nregardless of nesting. It is used to opt out of portal nesting."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "className": { "type": "string", "required": false },
    "containerRef": {
      "type": "RefObject<HTMLElement | null>",
      "required": false,
      "description": "The `ref` to the component where the portal will be attached to."
    },
    "dropAnimation": { "type": "DropAnimation", "required": false },
    "modifiers": { "type": "Modifiers", "required": false },
    "style": { "type": "CSSProperties", "required": false },
    "transition": { "type": "string | TransitionGetter", "required": false },
    "wrapperElement": { "type": "keyof IntrinsicElements", "required": false },
    "zIndex": { "type": "number", "required": false }
  },
  "KanbanItems": {},
  "UseKanbanContainer": {
    "cancelDrop": { "type": "CancelDrop", "required": false },
    "coordinateGetter": {
      "type": "KeyboardCoordinateGetter",
      "required": false
    },
    "defaultItems": { "type": "KanbanItems", "required": false },
    "items": { "type": "KanbanItems", "required": false },
    "modifiers": { "type": "Modifiers", "required": false },
    "onCardDragEnd": { "type": "OnCardDragEndHandler", "required": false },
    "onChange": { "type": "(items: KanbanItems) => void", "required": false },
    "onColumnDragEnd": { "type": "OnColumnDragEndHandler", "required": false },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "required": false
    },
    "strategy": { "type": "SortingStrategy", "required": false }
  }
}
