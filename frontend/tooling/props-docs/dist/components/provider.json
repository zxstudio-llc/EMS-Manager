{
  "SaasProvider": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Your application content"
    },
    "colorModeManager": {
      "type": "StorageManager",
      "defaultValue": "localStorageManager",
      "required": false,
      "description": "manager to persist a users color mode preference in\n\nomit if you don't render server-side\nfor SSR: choose `cookieStorageManager`"
    },
    "disableEnvironment": {
      "type": "boolean",
      "required": false,
      "description": "Disabled the use of automatic window and document detection.\nThis removed the injected `<span/>` element"
    },
    "disableGlobalStyle": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, Chakra will not mount the global styles defined in the theme."
    },
    "environment": {
      "type": "Environment",
      "required": false,
      "description": "The environment (`window` and `document`) to be used by\nall components and hooks.\n\nBy default, we smartly determine the ownerDocument and defaultView\nbased on where `ChakraProvider` is rendered."
    },
    "linkComponent": {
      "type": "ElementType<any, keyof IntrinsicElements>",
      "required": false
    },
    "onError": {
      "type": "(error: Error, errorInfo: ErrorInfo) => void",
      "required": false
    },
    "portalZIndex": {
      "type": "number",
      "defaultValue": "undefined",
      "required": false,
      "description": "Common z-index to use for `Portal`"
    },
    "resetCSS": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, `CSSReset` component will be mounted to help\nyou reset browser styles"
    },
    "resetScope": {
      "type": "string",
      "required": false,
      "description": "The selector to scope the css reset styles to."
    },
    "theme": {
      "type": "Dict",
      "required": false,
      "description": "a theme. if omitted, uses the default theme provided by chakra"
    },
    "toastOptions": {
      "type": "ToastProviderProps",
      "required": false,
      "description": "Provide defaults for `useToast()` usages for `ChakraProvider`s children"
    }
  },
  "UseActivePathOptions": {
    "end": {
      "type": "boolean",
      "required": false,
      "description": "Set to false to match the first parth of the path.\neg: /contacts will match /contacts/people"
    }
  }
}
