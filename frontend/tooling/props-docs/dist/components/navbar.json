{
  "Navbar": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode\n  | ReactNode[]",
      "required": false
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\" | \"linkedin\" | \"facebook\" | \"messenger\" | \"whatsapp\" | \"twitter\" | \"telegram\" | \"primary\" | \"secondary\" | \"indigo\"",
      "required": false,
      "description": "The visual color appearance of the component"
    },
    "disableScrollHandler": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Whether the navbar parent scroll event should be listened to or not."
    },
    "height": {
      "type": "string | number",
      "defaultValue": "\"3.5rem\" (56px)",
      "required": false,
      "description": "The height of the navbar."
    },
    "motionProps": {
      "type": "HTMLMotionProps<\"nav\">",
      "required": false,
      "description": "The props to modify the framer motion animation. Use the `variants` API to create your own animation.\nThis motion is only available if the `shouldHideOnScroll` prop is set to `true`."
    },
    "onAnimationStart": {
      "type": "(definition: AnimationDefinition) => void",
      "required": false,
      "description": "Callback when animation defined in `animate` begins.\n\nThe provided callback will be called with the triggering animation definition.\nIf this is a variant, it'll be the variant name, and if a target object\nthen it'll be the target object.\n\nThis way, it's possible to figure out which animation has started.\n\n```jsx\nfunction onStart() {\n  console.log(\"Animation started\")\n}\n\n<motion.div animate={{ x: 100 }} onAnimationStart={onStart} />\n```"
    },
    "onDrag": {
      "type": "(\n  event: MouseEvent | TouchEvent | PointerEvent,\n  info: PanInfo,\n) => void",
      "required": false,
      "description": "Callback function that fires when the component is dragged.\n\n```jsx\n<motion.div\n  drag\n  onDrag={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```"
    },
    "onDragEnd": {
      "type": "(\n  event: MouseEvent | TouchEvent | PointerEvent,\n  info: PanInfo,\n) => void",
      "required": false,
      "description": "Callback function that fires when dragging ends.\n\n```jsx\n<motion.div\n  drag\n  onDragEnd={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```"
    },
    "onDragStart": {
      "type": "(\n  event: MouseEvent | TouchEvent | PointerEvent,\n  info: PanInfo,\n) => void",
      "required": false,
      "description": "Callback function that fires when dragging starts.\n\n```jsx\n<motion.div\n  drag\n  onDragStart={\n    (event, info) => console.log(info.point.x, info.point.y)\n  }\n/>\n```"
    },
    "onScrollPositionChange": {
      "type": "(scrollPosition: number) => void",
      "required": false,
      "description": "The scroll event handler for the navbar. The event fires when the navbar parent element is scrolled.\nit only works if `disableScrollHandler` is set to `false` or `shouldHideOnScroll` is set to `true`."
    },
    "parentRef": {
      "type": "RefObject<HTMLElement>",
      "defaultValue": "`window`",
      "required": false,
      "description": "The parent element where the navbar is placed within.\nThis is used to determine the scroll position and whether the navbar should be hidden or not."
    },
    "shouldHideOnScroll": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Whether the navbar should hide on scroll or not."
    },
    "size": {
      "type": "string",
      "required": false,
      "description": "The size of the Navbar"
    },
    "style": {
      "type": "CSSProperties",
      "required": false,
      "description": "Style props to be applied to the navbar container."
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the Navbar"
    }
  },
  "NavbarBrand": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode\n  | ReactNode[]",
      "required": false
    }
  },
  "NavbarContent": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode\n  | ReactNode[]",
      "required": false,
      "description": "Typically the `NavbarItem` component"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | \"initial\" | \"inherit\" | (string & {}) | \"-moz-initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "Spacing between each navbar item"
    }
  },
  "NavbarItem": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Whether the item is active or not."
    }
  }
}
