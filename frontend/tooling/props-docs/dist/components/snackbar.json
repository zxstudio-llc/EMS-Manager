{
  "SnackbarOptions": {
    "toString": {
      "type": "(() => string) | (() => string)",
      "required": true,
      "description": "Returns a string representation of a string.\n\n\nReturns a string representation of an object."
    },
    "valueOf": {
      "type": "(() => string) | (() => Object)",
      "required": true,
      "description": "Returns the primitive value of the specified object."
    }
  },
  "SnackbarPromiseOptions": {
    "error": {
      "type": "SnackbarOptions | ((error: any) => SnackbarOptions)",
      "required": true
    },
    "success": { "type": "SnackbarOptions", "required": true },
    "loading": { "type": "SnackbarOptions", "required": false }
  },
  "UseSnackbarOptions": {
    "action": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "containerStyle": {
      "type": "StyleProps",
      "required": false,
      "description": "Optional style overrides for the container wrapping the toast component."
    },
    "description": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The description of the toast"
    },
    "duration": {
      "type": "number",
      "defaultValue": "5000 ( = 5000ms )",
      "required": false,
      "description": "The delay before the toast hides (in milliseconds)\nIf set to `null`, toast will never dismiss."
    },
    "icon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "A custom icon that will be displayed by the toast."
    },
    "id": {
      "type": "ToastId",
      "required": false,
      "description": "The `id` of the toast.\n\nMostly used when you need to prevent duplicate.\nBy default, we generate a unique `id` for each toast"
    },
    "isClosable": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, toast will show a close button"
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Callback function to run side effects after the toast has closed."
    },
    "position": {
      "type": "ToastPosition",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the toast"
    },
    "render": {
      "type": "(props: RenderProps) => ReactNode",
      "required": false,
      "description": "Render a component toast component.\nAny component passed will receive 2 props: `id` and `onClose`."
    },
    "status": {
      "type": "\"info\" | \"warning\" | \"success\" | \"error\" | \"loading\"",
      "required": false,
      "description": "The status of the toast."
    },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The title of the toast"
    },
    "variant": { "type": "string", "required": false }
  }
}
