{
  "AuthOptions": {
    "redirectTo": {
      "type": "string",
      "required": false,
      "description": "The url to redirect to after social or magic link login."
    }
  },
  "ExtraAuthOptions": {},
  "UseLogin": { "action": { "type": "AuthActionEnum", "required": false } },
  "AuthProvider": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "onAuthStateChange": {
      "type": "(\n  callback: AuthStateChangeCallback<TUser>,\n) => UnsubscribeHandler",
      "required": false,
      "description": "Should trigger whenever the authentication state changes"
    },
    "onGetToken": {
      "type": "() => Promise<AuthToken>",
      "required": false,
      "description": "Return the session token"
    },
    "onLoadUser": {
      "type": "() => Promise<TUser | null>",
      "required": false,
      "description": "Loads user data after authentication"
    },
    "onLogin": {
      "type": "(\n  params: AuthParams,\n  options?: AuthOptions<ExtraAuthOptions> | undefined,\n) => Promise<TUser | null | undefined>",
      "required": false,
      "description": "The login method"
    },
    "onLogout": {
      "type": "(\n  options?: AuthOptions<ExtraAuthOptions> | undefined,\n) => Promise<unknown>",
      "required": false,
      "description": "The logout method"
    },
    "onResetPassword": {
      "type": "(\n  params: Required<Pick<AuthParams, \"email\">>,\n  options?: AuthOptions<ExtraAuthOptions> | undefined,\n) => Promise<any>",
      "required": false,
      "description": "Request to reset a password."
    },
    "onSignup": {
      "type": "(\n  params: AuthParams,\n  options?: AuthOptions<ExtraAuthOptions> | undefined,\n) => Promise<TUser | null | undefined>",
      "required": false,
      "description": "The signup method"
    },
    "onUpdatePassword": {
      "type": "(params: Required<Pick<AuthParams, \"password\">>, options?: AuthOptions<ExtraAuthOptions> | undefined) => Promise<...>",
      "required": false,
      "description": "Update the password."
    },
    "onVerifyOtp": {
      "type": "(\n  params: OtpParams,\n  options?: AuthOptions<ExtraAuthOptions> | undefined,\n) => Promise<boolean | null | undefined>",
      "required": false,
      "description": "Verify an one time password (2fa)"
    }
  },
  "AuthFormContainer": {},
  "AuthFormDivider": { "label": { "type": "string", "required": false } },
  "AuthFormOptions": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The child component"
    },
    "dividerLabel": {
      "type": "string",
      "defaultValue": "or continue with",
      "required": false,
      "description": "Label for the divider between oath and the form"
    },
    "footer": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Render custom elements under the submit button"
    },
    "providerLabel": {
      "type": "string",
      "defaultValue": "Continue with",
      "required": false,
      "description": "Label for the provider buttons"
    },
    "providers": {
      "type": "AvailableProviders",
      "required": false,
      "description": "List of OAuth providers"
    },
    "redirectUrl": {
      "type": "string",
      "required": false,
      "description": "The redirect URL after succesful OAuth or Magic link login"
    },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The form title"
    },
    "type": {
      "type": "AuthTypeEnum",
      "required": false,
      "description": "The authentication type, `magiclink` or `password`"
    }
  },
  "AuthFormSuccess": {
    "description": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    }
  },
  "Auth": {
    "backLink": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "defaultValue": "Back to log in",
      "required": false,
      "description": "Back to log in link"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The child component"
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "dividerLabel": {
      "type": "string",
      "defaultValue": "or continue with",
      "required": false,
      "description": "Label for the divider between oath and the form"
    },
    "errors": { "type": "FieldErrors<any>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "footer": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Render custom elements under the submit button"
    },
    "forgotLink": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "defaultValue": "Forgot password?",
      "required": false,
      "description": "The forgot password link"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<any, object>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "loginLink": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "defaultValue": "Log in",
      "required": false,
      "description": "Customize the login link under the sign up form."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<any>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "(view: ViewType, error: Error) => void",
      "required": false,
      "description": "Called when a login or signup request fails."
    },
    "onSuccess": {
      "type": "(view: ViewType, data: any) => void",
      "required": false,
      "description": "Called when a login or signup request succeeds."
    },
    "onViewChange": {
      "type": "(view: ViewType) => void",
      "required": false,
      "description": "Called when the view changes."
    },
    "progressive": { "type": "boolean", "required": false },
    "providerLabel": {
      "type": "string",
      "defaultValue": "Continue with",
      "required": false,
      "description": "Label for the provider buttons"
    },
    "providers": {
      "type": "AvailableProviders",
      "required": false,
      "description": "The OAuth providers that are supported."
    },
    "redirectUrl": {
      "type": "string | ((view: RedirectViews) => string | undefined)",
      "required": false,
      "description": "The redirect URL after succesful login\nThis will only redirect if implemented in the auth provider."
    },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": { "type": "Resolver<any, object>", "required": false },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "signupLink": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "defaultValue": "Sign up",
      "required": false,
      "description": "Customize the signup link under the log in form."
    },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The form title"
    },
    "translations": {
      "type": "Partial<{ signup: string; signupSubmit: string; signupSuccess: string; signupSuccessDescription: string; login: string; loginSubmit: string; magicLinkSuccess: string; magicLinkSuccessDescription: string; ... 19 more ...; confirmPassword: string; }>",
      "required": false,
      "description": "Internationalization options for the auth form."
    },
    "type": {
      "type": "AuthTypeEnum",
      "required": false,
      "description": "The authentication type, `magiclink` or `password`"
    },
    "values": { "type": "any", "required": false },
    "view": {
      "type": "ViewType",
      "required": false,
      "description": "Sets the visible authentication form.\nSupported views are:\n- login\n- signup\n- forgot_password\n- update_password\n- otp"
    }
  },
  "AuthViewOptions": {
    "action": {
      "type": "AuthActionEnum",
      "required": false,
      "description": "The submit action, `logIn` or `signUp`"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Children are passed down to the underlying form"
    },
    "footer": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Render custom elements under the submit button"
    },
    "onError": {
      "type": "(error: Error) => void",
      "required": false,
      "description": "Error handler if login or signup fails"
    },
    "onSuccess": {
      "type": "(data: any) => void",
      "required": false,
      "description": "Callback executed after succesful login or signup"
    },
    "onValidationError": {
      "type": "(errors: FieldErrors<TFieldValues>) => void",
      "required": false,
      "description": "Callback executed when there are validation errors"
    },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The form title"
    },
    "type": {
      "type": "AuthTypeEnum",
      "required": false,
      "description": "The authentication type, `magiclink` or `password`"
    }
  },
  "ForgotPasswordForm": {
    "onSubmit": {
      "type": "SubmitHandler<Params>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "AsyncDefaultValues<Params> | DefaultValues<Params>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<Params>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<Params, object>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<Params>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<Params>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": { "type": "Resolver<Params, object>", "required": false },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "values": { "type": "Params", "required": false }
  },
  "ForgotPasswordView": {
    "action": {
      "type": "AuthActionEnum",
      "required": false,
      "description": "The submit action, `logIn` or `signUp`"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Children are passed down to the underlying form"
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "type ONLY_FOR_FORMAT =\n  | AsyncDefaultValues<ForgotPasswordSubmitParams>\n  | { [x: string]: any; email?: string | undefined }",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": {
      "type": "FieldErrors<ForgotPasswordSubmitParams>",
      "required": false
    },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "footer": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Render custom elements under the submit button"
    },
    "formRef": {
      "type": "RefObject<\n  UseFormReturn<ForgotPasswordSubmitParams, object>\n>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<ForgotPasswordSubmitParams>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "(error: Error) => void",
      "required": false,
      "description": "Error handler if login or signup fails"
    },
    "onSuccess": {
      "type": "(data: any) => void",
      "required": false,
      "description": "Callback executed after succesful login or signup"
    },
    "onValidationError": {
      "type": "(errors: FieldErrors<FieldValues>) => void",
      "required": false,
      "description": "Callback executed when there are validation errors"
    },
    "progressive": { "type": "boolean", "required": false },
    "redirectUrl": {
      "type": "string",
      "required": false,
      "description": "The URL where the user can save their new password."
    },
    "renderSuccess": {
      "type": "(\n  data: any,\n) => ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false
    },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": {
      "type": "Resolver<ForgotPasswordSubmitParams, object>",
      "required": false
    },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The form title"
    },
    "type": {
      "type": "AuthTypeEnum",
      "required": false,
      "description": "The authentication type, `magiclink` or `password`"
    },
    "values": { "type": "ForgotPasswordSubmitParams", "required": false }
  },
  "MagicLinkForm": {
    "onSubmit": {
      "type": "SubmitHandler<Params>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "AsyncDefaultValues<Params> | DefaultValues<Params>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<Params>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<Params, object>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<Params>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<Params>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": { "type": "Resolver<Params, object>", "required": false },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "values": { "type": "Params", "required": false }
  },
  "OtpForm": {
    "onSubmit": {
      "type": "SubmitHandler<Params>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "AsyncDefaultValues<Params> | DefaultValues<Params>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<Params>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<Params, object>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<Params>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<Params>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "pinLength": { "type": "number", "required": false },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": { "type": "Resolver<Params, object>", "required": false },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "values": { "type": "Params", "required": false }
  },
  "PasswordForm": {
    "onSubmit": {
      "type": "SubmitHandler<Params>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "AsyncDefaultValues<Params> | DefaultValues<Params>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<Params>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<Params, object>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<Params>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<Params>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": { "type": "Resolver<Params, object>", "required": false },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "values": { "type": "Params", "required": false }
  },
  "Providers": {
    "onSignIn": {
      "type": "(\n  providerId: Extract<keyof TProviders, string>,\n  options: AuthOptions,\n) => void",
      "required": true,
      "description": "The on sign in callback"
    },
    "providers": {
      "type": "TProviders",
      "required": true,
      "description": "The available providers"
    },
    "labelPrefix": {
      "type": "string",
      "defaultValue": "'Continue with'",
      "required": false,
      "description": "The label prefix"
    }
  },
  "UpdatePasswordForm": {
    "onSubmit": {
      "type": "SubmitHandler<Params>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "AsyncDefaultValues<Params> | DefaultValues<Params>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<Params>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<Params, object>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<Params>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<Params>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": { "type": "Resolver<Params, object>", "required": false },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "values": { "type": "Params", "required": false }
  },
  "UpdatePasswordView": {
    "action": {
      "type": "AuthActionEnum",
      "required": false,
      "description": "The submit action, `logIn` or `signUp`"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Children are passed down to the underlying form"
    },
    "context": { "type": "object", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "type ONLY_FOR_FORMAT =\n  | AsyncDefaultValues<UpdatePasswordSubmitParams>\n  | {\n      [x: string]: any\n      password?: string | undefined\n      confirmPassword?: string | undefined\n    }",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": {
      "type": "FieldErrors<UpdatePasswordSubmitParams>",
      "required": false
    },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "footer": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Render custom elements under the submit button"
    },
    "formRef": {
      "type": "RefObject<\n  UseFormReturn<UpdatePasswordSubmitParams, object>\n>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<UpdatePasswordSubmitParams>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "(error: Error) => void",
      "required": false,
      "description": "Error handler if login or signup fails"
    },
    "onSuccess": {
      "type": "(data: any) => void",
      "required": false,
      "description": "Callback executed after succesful login or signup"
    },
    "onValidationError": {
      "type": "(errors: FieldErrors<FieldValues>) => void",
      "required": false,
      "description": "Callback executed when there are validation errors"
    },
    "progressive": { "type": "boolean", "required": false },
    "renderSuccess": {
      "type": "(\n  data: any,\n) => ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false
    },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": {
      "type": "Resolver<UpdatePasswordSubmitParams, object>",
      "required": false
    },
    "reValidateMode": {
      "type": "\"onBlur\" | \"onChange\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "title": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The form title"
    },
    "type": {
      "type": "AuthTypeEnum",
      "required": false,
      "description": "The authentication type, `magiclink` or `password`"
    },
    "values": { "type": "UpdatePasswordSubmitParams", "required": false }
  }
}
