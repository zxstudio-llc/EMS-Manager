{
  "ToggleButtonGroup": {
    "defaultValue": {
      "type": "TType extends \"checkbox\" ? TValue[] : TValue",
      "required": false
    },
    "isAttached": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the borderRadius of button that are direct children will be altered\nto look flushed together"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, all wrapped button will be disabled"
    },
    "name": { "type": "string", "required": false },
    "onChange": {
      "type": "(\n  value: TType extends \"checkbox\" ? TValue[] : TValue,\n) => void",
      "required": false
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "defaultValue": "'0.5rem'",
      "required": false,
      "description": "The spacing between the buttons"
    },
    "type": { "type": "TType", "required": false },
    "value": {
      "type": "TType extends \"checkbox\" ? TValue[] : TValue",
      "required": false
    }
  },
  "ToggleButton": {
    "autoFocus": {
      "type": "boolean",
      "required": false,
      "description": "Whether the element should receive focus on render."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The content to display in the button."
    },
    "defaultSelected": {
      "type": "boolean",
      "required": false,
      "description": "Whether the element should be selected (uncontrolled)."
    },
    "isDisabled": {
      "type": "boolean",
      "required": false,
      "description": "Whether the button is disabled."
    },
    "isSelected": {
      "type": "boolean",
      "required": false,
      "description": "Whether the element should be selected (controlled)."
    },
    "onBlur": {
      "type": "(e: FocusEvent<Element, Element>) => void",
      "required": false,
      "description": "Handler that is called when the element loses focus."
    },
    "onChange": {
      "type": "(isSelected: boolean) => void",
      "required": false,
      "description": "Handler that is called when the element's selection state changes."
    },
    "onFocus": {
      "type": "(e: FocusEvent<Element, Element>) => void",
      "required": false,
      "description": "Handler that is called when the element receives focus."
    },
    "onFocusChange": {
      "type": "(isFocused: boolean) => void",
      "required": false,
      "description": "Handler that is called when the element's focus status changes."
    },
    "onKeyDown": {
      "type": "(e: KeyboardEvent) => void",
      "required": false,
      "description": "Handler that is called when a key is pressed."
    },
    "onKeyUp": {
      "type": "(e: KeyboardEvent) => void",
      "required": false,
      "description": "Handler that is called when a key is released."
    },
    "onPress": {
      "type": "(e: PressEvent) => void",
      "required": false,
      "description": "Handler that is called when the press is released over the target."
    },
    "onPressChange": {
      "type": "(isPressed: boolean) => void",
      "required": false,
      "description": "Handler that is called when the press state changes."
    },
    "onPressEnd": {
      "type": "(e: PressEvent) => void",
      "required": false,
      "description": "Handler that is called when a press interaction ends, either\nover the target or when the pointer leaves the target."
    },
    "onPressStart": {
      "type": "(e: PressEvent) => void",
      "required": false,
      "description": "Handler that is called when a press interaction starts."
    },
    "onPressUp": {
      "type": "(e: PressEvent) => void",
      "required": false,
      "description": "Handler that is called when a press is released over the target, regardless of\nwhether it started on the target or not."
    }
  }
}
