{
  "DisplayField": {
    "name": {
      "type": "string",
      "required": true,
      "description": "The field name"
    },
    "help": {
      "type": "string",
      "required": false,
      "description": "Field help text"
    },
    "hideLabel": {
      "type": "boolean",
      "required": false,
      "description": "Hide the field label"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "label": {
      "type": "string",
      "required": false,
      "description": "The label text used to inform users as to what information is\nrequested for a text field."
    },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The input placeholder"
    },
    "rules": {
      "type": "Omit<\n  RegisterOptions<FieldValues, string>,\n  \"disabled\" | \"setValueAs\" | \"valueAsDate\" | \"valueAsNumber\"\n>",
      "required": false,
      "description": "React hook form rules"
    },
    "value": {
      "type": "string | number | string[] | readonly string[]",
      "required": false,
      "description": "The value of the counter. Should be less than `max` and greater than `min`\n\n\nThe value of the select field.\n\n\nThe value to be used in the checkbox input.\nThis is the value that will be returned on form submission.\n\n\nThe value of the radio to be `checked`\n(in controlled mode)\n\n\nThe value of the pin input. This is the value\nthat will be returned when the pin input is filled"
    }
  },
  "Fields": {
    "fieldResolver": { "type": "FieldResolver", "required": false },
    "focusFirstField": { "type": "boolean", "required": false },
    "schema": { "type": "NonNullable<TSchema>", "required": false }
  },
  "FormLayout": {
    "autoColumns": {
      "type": "ResponsiveValue<GridAutoColumns<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridAutoColumns`"
    },
    "autoFlow": {
      "type": "ResponsiveValue<GridAutoFlow>",
      "required": false,
      "description": "Shorthand prop for `gridAutoFlow`"
    },
    "autoRows": {
      "type": "ResponsiveValue<GridAutoRows<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridAutoRows`"
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\" | \"linkedin\" | \"facebook\" | \"messenger\" | \"whatsapp\" | \"twitter\" | \"telegram\" | \"primary\" | \"secondary\" | \"indigo\"",
      "required": false,
      "description": "The visual color appearance of the component"
    },
    "column": {
      "type": "ResponsiveValue<GridColumn>",
      "required": false,
      "description": "Shorthand prop for `gridColumn`"
    },
    "columnGap": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "Shorthand prop for `gridColumnGap`"
    },
    "columns": {
      "type": "ResponsiveValue<number>",
      "required": false,
      "description": "The number of columns"
    },
    "gap": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "Shorthand prop for `gridGap`"
    },
    "minChildWidth": {
      "type": "ResponsiveValue<number | \"px\" | \"max\" | \"min\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"max-content\" | \"min-content\" | \"sm\" | ... 61 more ... | \"-webkit-min-content\">",
      "required": false,
      "description": "The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length."
    },
    "row": {
      "type": "ResponsiveValue<GridRow>",
      "required": false,
      "description": "Shorthand prop for `gridRow`"
    },
    "rowGap": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "Shorthand prop for `gridRowGap`"
    },
    "size": {
      "type": "string",
      "required": false,
      "description": "The size of the FormLayout"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "The gap between the grid items"
    },
    "spacingX": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "The column gap between the grid items"
    },
    "spacingY": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "The row gap between the grid items"
    },
    "templateAreas": {
      "type": "ResponsiveValue<GridTemplateAreas>",
      "required": false,
      "description": "Shorthand prop for `gridTemplateAreas`"
    },
    "templateColumns": {
      "type": "ResponsiveValue<GridTemplateColumns<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridTemplateColumns`"
    },
    "templateRows": {
      "type": "ResponsiveValue<GridTemplateRows<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridTemplateRows`"
    },
    "variant": {
      "type": "string",
      "required": false,
      "description": "The variant of the FormLayout"
    }
  },
  "SubmitButton": {
    "disableIfInvalid": {
      "type": "boolean",
      "required": false,
      "description": "Disable the submit button if the form is invalid."
    },
    "disableIfUntouched": {
      "type": "boolean",
      "required": false,
      "description": "Disable the submit button if the form is untouched."
    },
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between the button icon and label."
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon before the button's label."
    },
    "loadingText": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The label to show in the button when `isLoading` is true\nIf no text is passed, it only shows the spinner"
    },
    "rightIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon after the button's label."
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    },
    "spinnerPlacement": {
      "type": "\"end\" | \"start\"",
      "defaultValue": "start",
      "required": false,
      "description": "It determines the placement of the spinner when isLoading is true"
    }
  },
  "ArrayFieldButton": {
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between the button icon and label."
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon before the button's label."
    },
    "loadingText": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The label to show in the button when `isLoading` is true\nIf no text is passed, it only shows the spinner"
    },
    "rightIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon after the button's label."
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    },
    "spinnerPlacement": {
      "type": "\"end\" | \"start\"",
      "defaultValue": "start",
      "required": false,
      "description": "It determines the placement of the spinner when isLoading is true"
    }
  },
  "ArrayFieldContainer": {
    "name": {
      "type": "string",
      "required": true,
      "description": "The field name"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "defaultValue": {
      "type": "Record<string, any>",
      "required": false,
      "description": "Default value for new values in the array"
    },
    "help": {
      "type": "string",
      "required": false,
      "description": "Field help text"
    },
    "hideLabel": {
      "type": "boolean",
      "required": false,
      "description": "Hide the field label"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "keyName": {
      "type": "string",
      "defaultValue": "id",
      "required": false,
      "description": "Default key name for rows, change this if your data uses a different 'id' field"
    },
    "label": {
      "type": "string",
      "required": false,
      "description": "The field label"
    },
    "max": { "type": "number", "required": false },
    "min": { "type": "number", "required": false },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The input placeholder"
    },
    "rules": {
      "type": "Omit<\n  RegisterOptions<FieldValues, string>,\n  \"disabled\" | \"setValueAs\" | \"valueAsDate\" | \"valueAsNumber\"\n>",
      "required": false,
      "description": "React hook form rules"
    },
    "type": {
      "type": "string",
      "required": false,
      "description": "Build-in types:\ntext, number, password, textarea, select, native-select, checkbox, radio, switch, pin\n\nWill default to a text field if there is no matching type."
    }
  },
  "ArrayField": {
    "name": {
      "type": "TName",
      "required": true,
      "description": "The field name"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode\n  | ((props: ArrayField[]) => ReactNode)",
      "required": false
    },
    "defaultValue": {
      "type": "Record<string, any>",
      "required": false,
      "description": "Default value for new values in the array"
    },
    "help": {
      "type": "string",
      "required": false,
      "description": "Field help text"
    },
    "hideLabel": {
      "type": "boolean",
      "required": false,
      "description": "Hide the field label"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "keyName": {
      "type": "string",
      "defaultValue": "id",
      "required": false,
      "description": "Default key name for rows, change this if your data uses a different 'id' field"
    },
    "label": {
      "type": "string",
      "required": false,
      "description": "The field label"
    },
    "max": { "type": "number", "required": false },
    "min": { "type": "number", "required": false },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The input placeholder"
    },
    "rules": {
      "type": "Omit<\n  RegisterOptions<TFieldValues, TName>,\n  \"disabled\" | \"setValueAs\" | \"valueAsDate\" | \"valueAsNumber\"\n>",
      "required": false,
      "description": "React hook form rules"
    },
    "type": {
      "type": "string",
      "required": false,
      "description": "Build-in types:\ntext, number, password, textarea, select, native-select, checkbox, radio, switch, pin\n\nWill default to a text field if there is no matching type."
    }
  },
  "ArrayFieldRowFields": {
    "autoColumns": {
      "type": "ResponsiveValue<GridAutoColumns<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridAutoColumns`"
    },
    "autoFlow": {
      "type": "ResponsiveValue<GridAutoFlow>",
      "required": false,
      "description": "Shorthand prop for `gridAutoFlow`"
    },
    "autoRows": {
      "type": "ResponsiveValue<GridAutoRows<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridAutoRows`"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The fields"
    },
    "column": {
      "type": "ResponsiveValue<GridColumn>",
      "required": false,
      "description": "Shorthand prop for `gridColumn`"
    },
    "columnGap": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "Shorthand prop for `gridColumnGap`"
    },
    "columns": {
      "type": "ResponsiveValue<number>",
      "required": false,
      "description": "Amount of field columns"
    },
    "gap": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "Shorthand prop for `gridGap`"
    },
    "minChildWidth": {
      "type": "ResponsiveValue<number | \"px\" | \"max\" | \"min\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"max-content\" | \"min-content\" | \"sm\" | ... 61 more ... | \"-webkit-min-content\">",
      "required": false,
      "description": "The width at which child elements will break into columns. Pass a number for pixel values or a string for any other valid CSS length."
    },
    "row": {
      "type": "ResponsiveValue<GridRow>",
      "required": false,
      "description": "Shorthand prop for `gridRow`"
    },
    "rowGap": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "Shorthand prop for `gridRowGap`"
    },
    "spacing": {
      "type": "ResponsiveValue<string | number>",
      "required": false,
      "description": "Spacing between fields"
    },
    "spacingX": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "The column gap between the grid items"
    },
    "spacingY": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | \"6\" | ... 53 more ... | \"-3.5\">",
      "required": false,
      "description": "The row gap between the grid items"
    },
    "templateAreas": {
      "type": "ResponsiveValue<GridTemplateAreas>",
      "required": false,
      "description": "Shorthand prop for `gridTemplateAreas`"
    },
    "templateColumns": {
      "type": "ResponsiveValue<GridTemplateColumns<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridTemplateColumns`"
    },
    "templateRows": {
      "type": "ResponsiveValue<GridTemplateRows<0 | (string & {})>>",
      "required": false,
      "description": "Shorthand prop for `gridTemplateRows`"
    }
  },
  "ArrayFieldRows": {
    "children": {
      "type": "(\n  fields: ArrayField[],\n) => ReactElement<any, string | JSXElementConstructor<any>> | null",
      "required": true
    }
  },
  "ArrayFieldOptions": {
    "name": {
      "type": "TName",
      "required": true,
      "description": "The field name"
    },
    "defaultValue": {
      "type": "Record<string, any>",
      "required": false,
      "description": "Default value for new values in the array"
    },
    "keyName": {
      "type": "string",
      "defaultValue": "id",
      "required": false,
      "description": "Default key name for rows, change this if your data uses a different 'id' field"
    },
    "max": { "type": "number", "required": false },
    "min": { "type": "number", "required": false }
  },
  "UseArrayFieldRow": { "index": { "type": "number", "required": true } },
  "ObjectField": {
    "name": {
      "type": "TName",
      "required": true,
      "description": "The field name"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "columns": { "type": "ResponsiveValue<number>", "required": false },
    "help": {
      "type": "string",
      "required": false,
      "description": "Field help text"
    },
    "hideLabel": {
      "type": "boolean",
      "required": false,
      "description": "Hide the field label"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "label": {
      "type": "string",
      "required": false,
      "description": "The field label"
    },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The input placeholder"
    },
    "rules": {
      "type": "Omit<\n  RegisterOptions<FieldValues, string>,\n  \"disabled\" | \"setValueAs\" | \"valueAsDate\" | \"valueAsNumber\"\n>",
      "required": false,
      "description": "React hook form rules"
    },
    "spacing": {
      "type": "ResponsiveValue<string | number>",
      "required": false
    },
    "type": {
      "type": "string",
      "required": false,
      "description": "Build-in types:\ntext, number, password, textarea, select, native-select, checkbox, radio, switch, pin\n\nWill default to a text field if there is no matching type."
    }
  },
  "DisplayIf": {
    "children": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": true
    },
    "name": { "type": "TName", "required": true },
    "condition": {
      "type": "(\n  value: unknown,\n  context: UseFormReturn<TFieldValues>,\n) => boolean",
      "required": false
    },
    "defaultValue": { "type": "{}", "required": false },
    "isDisabled": { "type": "boolean", "required": false },
    "isExact": { "type": "boolean", "required": false },
    "onToggle": {
      "type": "(\n  conditionMatched: boolean,\n  context: UseFormReturn<TFieldValues>,\n) => void",
      "required": false
    }
  },
  "FormStepOptions": {
    "name": {
      "type": "TName",
      "required": true,
      "description": "The step name"
    },
    "resolver": {
      "type": "any",
      "required": false,
      "description": "Hook Form Resolver"
    },
    "schema": { "type": "any", "required": false, "description": "Schema" }
  },
  "FormStep": {
    "name": {
      "type": "TName",
      "required": true,
      "description": "The step name"
    },
    "onSubmit": { "type": "FormStepSubmitHandler", "required": false },
    "resolver": {
      "type": "any",
      "required": false,
      "description": "Hook Form Resolver"
    },
    "schema": { "type": "any", "required": false, "description": "Schema" }
  },
  "FormStepper": {
    "index": {
      "type": "number",
      "required": false,
      "description": "The current step index."
    },
    "onChange": {
      "type": "(index: number) => void",
      "required": false,
      "description": "Callback invoked when the step changes."
    },
    "orientation": {
      "type": "\"horizontal\" | \"vertical\"",
      "required": false,
      "description": "The orientation of the stepper."
    },
    "render": {
      "type": "(\n  props?: any,\n) => ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false
    },
    "step": {
      "type": "string | number",
      "required": false,
      "description": "The current step index or name."
    },
    "stepperProps": {
      "type": "StepperProps",
      "required": false,
      "description": "Props to pass to the stepper component."
    }
  },
  "NextButton": {
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between the button icon and label."
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "label": { "type": "string", "required": false },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon before the button's label."
    },
    "loadingText": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The label to show in the button when `isLoading` is true\nIf no text is passed, it only shows the spinner"
    },
    "rightIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon after the button's label."
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    },
    "spinnerPlacement": {
      "type": "\"end\" | \"start\"",
      "defaultValue": "start",
      "required": false,
      "description": "It determines the placement of the spinner when isLoading is true"
    },
    "submitLabel": { "type": "string", "required": false }
  },
  "StepForm": {
    "onSubmit": {
      "type": "SubmitHandler<TFieldValues>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: StepFormRenderContext<...>) => ReactNode)",
      "required": false
    },
    "context": { "type": "TContext", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "type ONLY_FOR_FORMAT =\n  | AsyncDefaultValues<TFieldValues>\n  | DefaultValues<TFieldValues>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<TFieldValues>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<TFieldValues, TContext>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "isCompleted": { "type": "boolean", "required": false },
    "mode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<TFieldValues>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<TFieldValues>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": {
      "type": "Resolver<TFieldValues, TContext>",
      "required": false
    },
    "reValidateMode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "step": { "type": "string | number", "required": false },
    "steps": { "type": "TSteps", "required": false },
    "values": { "type": "TFieldValues", "required": false }
  },
  "StepsOptions": {
    "__@iterator@38027": {
      "type": "() => IterableIterator<{\n  name: TName\n  schema?: TSchema | undefined\n}>",
      "required": true,
      "description": "Iterator"
    },
    "__@unscopables@39477": {
      "type": "{ [x: number]: boolean | undefined; length?: boolean | undefined; toString?: boolean | undefined; toLocaleString?: boolean | undefined; pop?: boolean | undefined; push?: boolean | undefined; ... 35 more ...; readonly [Symbol.unscopables]?: boolean | undefined; }",
      "required": true,
      "description": "Is an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
    },
    "at": {
      "type": "(\n  index: number,\n) => { name: TName; schema?: TSchema | undefined } | undefined",
      "required": true,
      "description": "Returns the item located at the specified index."
    },
    "concat": {
      "type": "{ (...items: ConcatArray<{ name: TName; schema?: TSchema | undefined; }>[]): { name: TName; schema?: TSchema | undefined; }[]; (...items: ({ name: TName; schema?: TSchema | undefined; } | ConcatArray<...>)[]): { ...; }[]; }",
      "required": true,
      "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays."
    },
    "copyWithin": {
      "type": "(\n  target: number,\n  start: number,\n  end?: number | undefined,\n) => StepsOptions<TSchema, TName>",
      "required": true,
      "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
    },
    "entries": {
      "type": "() => IterableIterator<\n  [number, { name: TName; schema?: TSchema | undefined }]\n>",
      "required": true,
      "description": "Returns an iterable of key, value pairs for every entry in the array"
    },
    "every": {
      "type": "{ <S extends { name: TName; schema?: TSchema | undefined; }>(predicate: (value: { name: TName; schema?: TSchema | undefined; }, index: number, array: { name: TName; schema?: TSchema | undefined; }[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: { ...; }, index: number, array: { ...; }[]) => unknow...",
      "required": true,
      "description": "Determines whether all the members of an array satisfy the specified test."
    },
    "fill": {
      "type": "(\n  value: { name: TName; schema?: TSchema | undefined },\n  start?: number | undefined,\n  end?: number | undefined,\n) => StepsOptions<TSchema, TName>",
      "required": true,
      "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array"
    },
    "filter": {
      "type": "{ <S extends { name: TName; schema?: TSchema | undefined; }>(predicate: (value: { name: TName; schema?: TSchema | undefined; }, index: number, array: { name: TName; schema?: TSchema | undefined; }[]) => value is S, thisArg?: any): S[]; (predicate: (value: { ...; }, index: number, array: { ...; }[]) => unknown, thisA...",
      "required": true,
      "description": "Returns the elements of an array that meet the condition specified in a callback function."
    },
    "find": {
      "type": "{ <S extends { name: TName; schema?: TSchema | undefined; }>(predicate: (value: { name: TName; schema?: TSchema | undefined; }, index: number, obj: { name: TName; schema?: TSchema | undefined; }[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: { ...; }, index: number, obj: { ...; }[]) => unknown,...",
      "required": true,
      "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
    },
    "findIndex": {
      "type": "(\n  predicate: (\n    value: { name: TName; schema?: TSchema | undefined },\n    index: number,\n    obj: { name: TName; schema?: TSchema | undefined }[],\n  ) => unknown,\n  thisArg?: any,\n) => number",
      "required": true,
      "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
    },
    "findLast": {
      "type": "{ <S extends { name: TName; schema?: TSchema | undefined; }>(predicate: (value: { name: TName; schema?: TSchema | undefined; }, index: number, array: { name: TName; schema?: TSchema | undefined; }[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: { ...; }, index: number, array: { ...; }[]) => unkn...",
      "required": true,
      "description": "Returns the value of the last element in the array where predicate is true, and undefined\notherwise."
    },
    "findLastIndex": {
      "type": "(\n  predicate: (\n    value: { name: TName; schema?: TSchema | undefined },\n    index: number,\n    array: { name: TName; schema?: TSchema | undefined }[],\n  ) => unknown,\n  thisArg?: any,\n) => number",
      "required": true,
      "description": "Returns the index of the last element in the array where predicate is true, and -1\notherwise."
    },
    "flat": {
      "type": "<A, D extends number = 1>(\n  this: A,\n  depth?: D | undefined,\n) => FlatArray<A, D>[]",
      "required": true,
      "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth."
    },
    "flatMap": {
      "type": "<U, This = undefined>(\n  callback: (\n    this: This,\n    value: { name: TName; schema?: TSchema | undefined },\n    index: number,\n    array: { name: TName; schema?: TSchema | undefined }[],\n  ) => U | readonly U[],\n  thisArg?: This | undefined,\n) => U[]",
      "required": true,
      "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1."
    },
    "forEach": {
      "type": "(\n  callbackfn: (\n    value: { name: TName; schema?: TSchema | undefined },\n    index: number,\n    array: { name: TName; schema?: TSchema | undefined }[],\n  ) => void,\n  thisArg?: any,\n) => void",
      "required": true,
      "description": "Performs the specified action for each element in an array."
    },
    "includes": {
      "type": "(\n  searchElement: { name: TName; schema?: TSchema | undefined },\n  fromIndex?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Determines whether an array includes a certain element, returning true or false as appropriate."
    },
    "indexOf": {
      "type": "(\n  searchElement: { name: TName; schema?: TSchema | undefined },\n  fromIndex?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present."
    },
    "join": {
      "type": "(separator?: string | undefined) => string",
      "required": true,
      "description": "Adds all the elements of an array into a string, separated by the specified separator string."
    },
    "keys": {
      "type": "() => IterableIterator<number>",
      "required": true,
      "description": "Returns an iterable of keys in the array"
    },
    "lastIndexOf": {
      "type": "(\n  searchElement: { name: TName; schema?: TSchema | undefined },\n  fromIndex?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present."
    },
    "length": {
      "type": "number",
      "required": true,
      "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
    },
    "map": {
      "type": "<U>(\n  callbackfn: (\n    value: { name: TName; schema?: TSchema | undefined },\n    index: number,\n    array: { name: TName; schema?: TSchema | undefined }[],\n  ) => U,\n  thisArg?: any,\n) => U[]",
      "required": true,
      "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
    },
    "pop": {
      "type": "() =>\n  | { name: TName; schema?: TSchema | undefined }\n  | undefined",
      "required": true,
      "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
    },
    "push": {
      "type": "(\n  ...items: { name: TName; schema?: TSchema | undefined }[]\n) => number",
      "required": true,
      "description": "Appends new elements to the end of an array, and returns the new length of the array."
    },
    "reduce": {
      "type": "{ (callbackfn: (previousValue: { name: TName; schema?: TSchema | undefined; }, currentValue: { name: TName; schema?: TSchema | undefined; }, currentIndex: number, array: { ...; }[]) => { ...; }): { ...; }; (callbackfn: (previousValue: { ...; }, currentValue: { ...; }, currentIndex: number, array: { ...; }[]) => { .....",
      "required": true,
      "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
    },
    "reduceRight": {
      "type": "{ (callbackfn: (previousValue: { name: TName; schema?: TSchema | undefined; }, currentValue: { name: TName; schema?: TSchema | undefined; }, currentIndex: number, array: { ...; }[]) => { ...; }): { ...; }; (callbackfn: (previousValue: { ...; }, currentValue: { ...; }, currentIndex: number, array: { ...; }[]) => { .....",
      "required": true,
      "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
    },
    "reverse": {
      "type": "() => { name: TName; schema?: TSchema | undefined }[]",
      "required": true,
      "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array."
    },
    "shift": {
      "type": "() =>\n  | { name: TName; schema?: TSchema | undefined }\n  | undefined",
      "required": true,
      "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
    },
    "slice": {
      "type": "(\n  start?: number | undefined,\n  end?: number | undefined,\n) => { name: TName; schema?: TSchema | undefined }[]",
      "required": true,
      "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array."
    },
    "some": {
      "type": "(\n  predicate: (\n    value: { name: TName; schema?: TSchema | undefined },\n    index: number,\n    array: { name: TName; schema?: TSchema | undefined }[],\n  ) => unknown,\n  thisArg?: any,\n) => boolean",
      "required": true,
      "description": "Determines whether the specified callback function returns true for any element of an array."
    },
    "sort": {
      "type": "(\n  compareFn?:\n    | ((\n        a: { name: TName; schema?: TSchema | undefined },\n        b: { name: TName; schema?: TSchema | undefined },\n      ) => number)\n    | undefined,\n) => StepsOptions<TSchema, TName>",
      "required": true,
      "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array."
    },
    "splice": {
      "type": "{ (start: number, deleteCount?: number | undefined): { name: TName; schema?: TSchema | undefined; }[]; (start: number, deleteCount: number, ...items: { name: TName; schema?: TSchema | undefined; }[]): { ...; }[]; }",
      "required": true,
      "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
    },
    "toLocaleString": {
      "type": "() => string",
      "required": true,
      "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods."
    },
    "toReversed": {
      "type": "() => { name: TName; schema?: TSchema | undefined }[]",
      "required": true,
      "description": "Returns a copy of an array with its elements reversed."
    },
    "toSorted": {
      "type": "(\n  compareFn?:\n    | ((\n        a: { name: TName; schema?: TSchema | undefined },\n        b: { name: TName; schema?: TSchema | undefined },\n      ) => number)\n    | undefined,\n) => { name: TName; schema?: TSchema | undefined }[]",
      "required": true,
      "description": "Returns a copy of an array with its elements sorted."
    },
    "toSpliced": {
      "type": "{ (start: number, deleteCount: number, ...items: { name: TName; schema?: TSchema | undefined; }[]): { name: TName; schema?: TSchema | undefined; }[]; (start: number, deleteCount?: number | undefined): { ...; }[]; }",
      "required": true,
      "description": "Copies an array and removes elements and, if necessary, inserts new elements in their place. Returns the copied array.\n\n\nCopies an array and removes elements while returning the remaining elements."
    },
    "toString": {
      "type": "() => string",
      "required": true,
      "description": "Returns a string representation of an array."
    },
    "unshift": {
      "type": "(\n  ...items: { name: TName; schema?: TSchema | undefined }[]\n) => number",
      "required": true,
      "description": "Inserts new elements at the start of an array, and returns the new length of the array."
    },
    "values": {
      "type": "() => IterableIterator<{\n  name: TName\n  schema?: TSchema | undefined\n}>",
      "required": true,
      "description": "Returns an iterable of values in the array"
    },
    "with": {
      "type": "(\n  index: number,\n  value: { name: TName; schema?: TSchema | undefined },\n) => { name: TName; schema?: TSchema | undefined }[]",
      "required": true,
      "description": "Copies an array, then overwrites the value at the provided index with the\ngiven value. If the index is negative, then it replaces from the end\nof the array."
    }
  },
  "UseFormStep": {
    "name": { "type": "string", "required": true },
    "onSubmit": {
      "type": "FormStepSubmitHandler<FieldValues>",
      "required": false
    },
    "resolver": { "type": "any", "required": false },
    "schema": { "type": "any", "required": false }
  },
  "UseStepForm": {
    "onSubmit": {
      "type": "SubmitHandler<TFieldValues>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: StepFormRenderContext<...>) => ReactNode)",
      "required": false
    },
    "context": { "type": "TContext", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "type ONLY_FOR_FORMAT =\n  | AsyncDefaultValues<TFieldValues>\n  | DefaultValues<TFieldValues>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<TFieldValues>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<TFieldValues, TContext>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "isCompleted": { "type": "boolean", "required": false },
    "mode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<TFieldValues>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<TFieldValues>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": {
      "type": "Resolver<TFieldValues, TContext>",
      "required": false
    },
    "reValidateMode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "any",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "step": { "type": "string | number", "required": false },
    "steps": { "type": "TSteps", "required": false },
    "values": { "type": "TFieldValues", "required": false }
  },
  "WatchField": {
    "children": {
      "type": "(value: Value, form: { fieldResolver?: FieldResolver | undefined; schema?: any; fields?: { [key: string]: unknown; } | undefined; watch: UseFormWatch<FieldValues>; ... 13 more ...; setFocus: UseFormSetFocus<...>; }) => void | ReactElement<...>",
      "required": true
    },
    "name": { "type": "string", "required": true },
    "defaultValue": { "type": "NonNullable<Value>", "required": false },
    "isDisabled": { "type": "boolean", "required": false },
    "isExact": { "type": "boolean", "required": false }
  },
  "InputRightButton": {
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between the button icon and label."
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon before the button's label."
    },
    "loadingText": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The label to show in the button when `isLoading` is true\nIf no text is passed, it only shows the spinner"
    },
    "rightIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon after the button's label."
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    },
    "spinnerPlacement": {
      "type": "\"end\" | \"start\"",
      "defaultValue": "start",
      "required": false,
      "description": "It determines the placement of the spinner when isLoading is true"
    }
  },
  "NativeSelect": {
    "errorBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the select is invalid. Use color keys in `theme.colors`"
    },
    "focusBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the select is focused. Use color keys in `theme.colors`"
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "The icon element to use in the select"
    },
    "iconColor": {
      "type": "string",
      "required": false,
      "description": "The color of the icon"
    },
    "iconSize": {
      "type": "string",
      "required": false,
      "description": "The size (width and height) of the icon"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "options": { "type": "Option[]", "required": false },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The placeholder for the select. We render an `<option/>` element that has\nempty value.\n\n```jsx\n<option value=\"\">{placeholder}</option>\n```"
    },
    "rootProps": {
      "type": "RootProps",
      "required": false,
      "description": "Props to forward to the root `div` element"
    }
  },
  "SelectButton": {
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between the button icon and label."
    },
    "isActive": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be styled in its active state."
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will be disabled."
    },
    "isLoading": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the button will show a spinner."
    },
    "leftIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon before the button's label."
    },
    "loadingText": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The label to show in the button when `isLoading` is true\nIf no text is passed, it only shows the spinner"
    },
    "rightIcon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "If added, the button will show an icon after the button's label."
    },
    "spinner": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Replace the spinner component when `isLoading` is set to `true`"
    },
    "spinnerPlacement": {
      "type": "\"end\" | \"start\"",
      "defaultValue": "start",
      "required": false,
      "description": "It determines the placement of the spinner when isLoading is true"
    }
  },
  "SelectList": {
    "motionProps": {
      "type": "HTMLMotionProps<\"div\">",
      "required": false,
      "description": "The framer-motion props to animate the menu list"
    },
    "rootProps": {
      "type": "HTMLChakraProps<\"div\">",
      "required": false,
      "description": "Props for the root element that positions the menu."
    }
  },
  "Select": {
    "name": {
      "type": "string",
      "required": true,
      "description": "The name of the input field in a native form."
    },
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "autoSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the first enabled menu item will receive focus and be selected\nwhen the menu opens."
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "clippingParents",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier"
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when you click outside\nthe menu list"
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when a menu item is\nclicked"
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\" | \"linkedin\" | \"facebook\" | \"messenger\" | \"whatsapp\" | \"twitter\" | \"telegram\" | \"primary\" | \"secondary\" | \"indigo\"",
      "required": false,
      "description": "The visual color appearance of the component"
    },
    "computePositionOnMount": { "type": "boolean", "required": false },
    "defaultIsOpen": { "type": "boolean", "required": false },
    "defaultValue": {
      "type": "string | string[]",
      "required": false,
      "description": "The initial value of the select field."
    },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "required": false,
      "description": "If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\nbecome 'top-left' and vice-verse"
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`\nand `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's\nabout to overflow its boundary area."
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "id": { "type": "string", "required": false },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isDisabled": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the select will be disabled."
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Performance 🚀:\nIf `true`, the MenuItem rendering will be deferred\nuntil the menu is open."
    },
    "isOpen": { "type": "boolean", "required": false },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "unmount",
      "required": false,
      "description": "Performance 🚀:\nThe lazy behavior of menu's content when not visible.\nOnly works when `isLazy={true}`\n\n- \"unmount\": The menu's content is always unmounted when not open.\n- \"keepMounted\": The menu's content initially unmounted,\nbut stays mounted when menu is open."
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "multiple": {
      "type": "boolean",
      "required": false,
      "description": "Enable multiple select."
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onChange": {
      "type": "(value: string | string[]) => void",
      "required": false,
      "description": "The callback invoked when the value of the select field changes."
    },
    "onClose": { "type": "() => void", "required": false },
    "onOpen": { "type": "() => void", "required": false },
    "options": {
      "type": "FieldOptions<SelectOption>",
      "required": false,
      "description": "An array of options\nIf you leave this empty the children prop will be rendered."
    },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The placeholder text when there's no value."
    },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure\nit's visible within the boundary area."
    },
    "renderValue": {
      "type": "(value: string | string[]) => ReactNode",
      "required": false,
      "description": "The function used to render the value of the select field."
    },
    "size": {
      "defaultValue": "md",
      "type": "\"lg\" | \"md\" | \"sm\" | \"xs\"",
      "required": false,
      "description": "The size of the Select"
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "absolute",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "value": {
      "type": "string | string[]",
      "required": false,
      "description": "The value of the select field."
    },
    "variant": {
      "defaultValue": "outline",
      "type": "\"outline\" | \"filled\" | \"flushed\" | \"unstyled\"",
      "required": false,
      "description": "The variant of the Select"
    }
  },
  "PasswordInput": {
    "errorBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is invalid. Use color keys in `theme.colors`"
    },
    "focusBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is focused. Use color keys in `theme.colors`"
    },
    "htmlSize": {
      "type": "number",
      "required": false,
      "description": "The native HTML `size` attribute to be passed to the `input`"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "leftAddon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "viewIcon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "viewOffIcon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    }
  },
  "RadioInput": {
    "options": { "type": "RadioOptions", "required": true },
    "defaultValue": {
      "type": "string",
      "required": false,
      "description": "The value of the radio to be `checked`\ninitially (in uncontrolled mode)"
    },
    "direction": { "type": "StackDirection", "required": false },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, all wrapped radio inputs will be disabled"
    },
    "isFocusable": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true` and `isDisabled` is true, all wrapped radio inputs will remain\nfocusable but not interactive."
    },
    "isNative": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, input elements will receive\n`checked` attribute instead of `isChecked`.\n\nThis assumes, you're using native radio inputs"
    },
    "name": {
      "type": "string",
      "required": false,
      "description": "The `name` attribute forwarded to each `radio` element"
    },
    "onChange": {
      "type": "(nextValue: string) => void",
      "required": false,
      "description": "Function called once a radio is checked"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false
    },
    "value": {
      "type": "string",
      "required": false,
      "description": "The value of the radio to be `checked`\n(in controlled mode)"
    }
  },
  "RadioOptions": {
    "__@iterator@38027": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<string>)\n  | (() => IterableIterator<RadioOption>)",
      "required": true,
      "description": "Iterator"
    },
    "__@unscopables@39477": {
      "type": "{ [x: number]: boolean | undefined; length?: boolean | undefined; toString?: boolean | undefined; toLocaleString?: boolean | undefined; pop?: boolean | undefined; push?: boolean | undefined; ... 35 more ...; readonly [Symbol.unscopables]?: boolean | undefined; } | { ...; }",
      "required": true,
      "description": "Is an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
    },
    "at": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((index: number) => string | undefined)\n  | ((index: number) => RadioOption | undefined)",
      "required": true,
      "description": "Returns the item located at the specified index."
    },
    "concat": {
      "type": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; } | { (...items: ConcatArray<RadioOption>[]): RadioOption[]; (...items: (RadioOption | ConcatArray<...>)[]): RadioOption[]; }",
      "required": true,
      "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays."
    },
    "copyWithin": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((target: number, start: number, end?: number | undefined) => string[])\n  | ((target: number, start: number, end?: number | undefined) => RadioOption[])",
      "required": true,
      "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
    },
    "entries": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<[number, string]>)\n  | (() => IterableIterator<[number, RadioOption]>)",
      "required": true,
      "description": "Returns an iterable of key, value pairs for every entry in the array"
    },
    "every": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean; } | { ...; }",
      "required": true,
      "description": "Determines whether all the members of an array satisfy the specified test."
    },
    "fill": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      value: string,\n      start?: number | undefined,\n      end?: number | undefined,\n    ) => string[])\n  | ((\n      value: RadioOption,\n      start?: number | undefined,\n      end?: number | undefined,\n    ) => RadioOption[])",
      "required": true,
      "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array"
    },
    "filter": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; } | { ...; }",
      "required": true,
      "description": "Returns the elements of an array that meet the condition specified in a callback function."
    },
    "find": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string | undefined; } | { ...; }",
      "required": true,
      "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
    },
    "findIndex": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      predicate: (value: string, index: number, obj: string[]) => unknown,\n      thisArg?: any,\n    ) => number)\n  | ((\n      predicate: (\n        value: RadioOption,\n        index: number,\n        obj: RadioOption[],\n      ) => unknown,\n      thisArg?: any,\n    ) => number)",
      "required": true,
      "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
    },
    "findLast": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string | undefined; } | { ...; }",
      "required": true,
      "description": "Returns the value of the last element in the array where predicate is true, and undefined\notherwise."
    },
    "findLastIndex": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      predicate: (value: string, index: number, array: string[]) => unknown,\n      thisArg?: any,\n    ) => number)\n  | ((\n      predicate: (\n        value: RadioOption,\n        index: number,\n        array: RadioOption[],\n      ) => unknown,\n      thisArg?: any,\n    ) => number)",
      "required": true,
      "description": "Returns the index of the last element in the array where predicate is true, and -1\notherwise."
    },
    "flat": {
      "type": "type ONLY_FOR_FORMAT =\n  | (<A, D extends number = 1>(\n      this: A,\n      depth?: D | undefined,\n    ) => FlatArray<A, D>[])\n  | (<A, D extends number = 1>(\n      this: A,\n      depth?: D | undefined,\n    ) => FlatArray<A, D>[])",
      "required": true,
      "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth."
    },
    "flatMap": {
      "type": "type ONLY_FOR_FORMAT =\n  | (<U, This = undefined>(\n      callback: (\n        this: This,\n        value: string,\n        index: number,\n        array: string[],\n      ) => U | readonly U[],\n      thisArg?: This | undefined,\n    ) => U[])\n  | (<U, This = undefined>(\n      callback: (\n        this: This,\n        value: RadioOption,\n        index: number,\n        array: RadioOption[],\n      ) => U | readonly U[],\n      thisArg?: This | undefined,\n    ) => U[])",
      "required": true,
      "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1."
    },
    "forEach": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      callbackfn: (value: string, index: number, array: string[]) => void,\n      thisArg?: any,\n    ) => void)\n  | ((\n      callbackfn: (\n        value: RadioOption,\n        index: number,\n        array: RadioOption[],\n      ) => void,\n      thisArg?: any,\n    ) => void)",
      "required": true,
      "description": "Performs the specified action for each element in an array."
    },
    "includes": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((searchElement: string, fromIndex?: number | undefined) => boolean)\n  | ((searchElement: RadioOption, fromIndex?: number | undefined) => boolean)",
      "required": true,
      "description": "Determines whether an array includes a certain element, returning true or false as appropriate."
    },
    "indexOf": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((searchElement: string, fromIndex?: number | undefined) => number)\n  | ((searchElement: RadioOption, fromIndex?: number | undefined) => number)",
      "required": true,
      "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present."
    },
    "join": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((separator?: string | undefined) => string)\n  | ((separator?: string | undefined) => string)",
      "required": true,
      "description": "Adds all the elements of an array into a string, separated by the specified separator string."
    },
    "keys": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<number>)\n  | (() => IterableIterator<number>)",
      "required": true,
      "description": "Returns an iterable of keys in the array"
    },
    "lastIndexOf": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((searchElement: string, fromIndex?: number | undefined) => number)\n  | ((searchElement: RadioOption, fromIndex?: number | undefined) => number)",
      "required": true,
      "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present."
    },
    "length": {
      "type": "number",
      "required": true,
      "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
    },
    "map": {
      "type": "type ONLY_FOR_FORMAT =\n  | (<U>(\n      callbackfn: (value: string, index: number, array: string[]) => U,\n      thisArg?: any,\n    ) => U[])\n  | (<U>(\n      callbackfn: (\n        value: RadioOption,\n        index: number,\n        array: RadioOption[],\n      ) => U,\n      thisArg?: any,\n    ) => U[])",
      "required": true,
      "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
    },
    "pop": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => string | undefined)\n  | (() => RadioOption | undefined)",
      "required": true,
      "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
    },
    "push": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((...items: string[]) => number)\n  | ((...items: RadioOption[]) => number)",
      "required": true,
      "description": "Appends new elements to the end of an array, and returns the new length of the array."
    },
    "reduce": {
      "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
      "required": true,
      "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
    },
    "reduceRight": {
      "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
      "required": true,
      "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
    },
    "reverse": {
      "type": "(() => string[]) | (() => RadioOption[])",
      "required": true,
      "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array."
    },
    "shift": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => string | undefined)\n  | (() => RadioOption | undefined)",
      "required": true,
      "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
    },
    "slice": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((start?: number | undefined, end?: number | undefined) => string[])\n  | ((start?: number | undefined, end?: number | undefined) => RadioOption[])",
      "required": true,
      "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array."
    },
    "some": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      predicate: (value: string, index: number, array: string[]) => unknown,\n      thisArg?: any,\n    ) => boolean)\n  | ((\n      predicate: (\n        value: RadioOption,\n        index: number,\n        array: RadioOption[],\n      ) => unknown,\n      thisArg?: any,\n    ) => boolean)",
      "required": true,
      "description": "Determines whether the specified callback function returns true for any element of an array."
    },
    "sort": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((compareFn?: ((a: string, b: string) => number) | undefined) => string[])\n  | ((\n      compareFn?: ((a: RadioOption, b: RadioOption) => number) | undefined,\n    ) => RadioOption[])",
      "required": true,
      "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array."
    },
    "splice": {
      "type": "type ONLY_FOR_FORMAT =\n  | {\n      (start: number, deleteCount?: number | undefined): string[]\n      (start: number, deleteCount: number, ...items: string[]): string[]\n    }\n  | {\n      (start: number, deleteCount?: number | undefined): RadioOption[]\n      (\n        start: number,\n        deleteCount: number,\n        ...items: RadioOption[]\n      ): RadioOption[]\n    }",
      "required": true,
      "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
    },
    "toLocaleString": {
      "type": "(() => string) | (() => string)",
      "required": true,
      "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods."
    },
    "toReversed": {
      "type": "(() => string[]) | (() => RadioOption[])",
      "required": true,
      "description": "Returns a copy of an array with its elements reversed."
    },
    "toSorted": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((compareFn?: ((a: string, b: string) => number) | undefined) => string[])\n  | ((\n      compareFn?: ((a: RadioOption, b: RadioOption) => number) | undefined,\n    ) => RadioOption[])",
      "required": true,
      "description": "Returns a copy of an array with its elements sorted."
    },
    "toSpliced": {
      "type": "type ONLY_FOR_FORMAT =\n  | {\n      (start: number, deleteCount: number, ...items: string[]): string[]\n      (start: number, deleteCount?: number | undefined): string[]\n    }\n  | {\n      (\n        start: number,\n        deleteCount: number,\n        ...items: RadioOption[]\n      ): RadioOption[]\n      (start: number, deleteCount?: number | undefined): RadioOption[]\n    }",
      "required": true,
      "description": "Copies an array and removes elements and, if necessary, inserts new elements in their place. Returns the copied array.\n\n\nCopies an array and removes elements while returning the remaining elements."
    },
    "toString": {
      "type": "(() => string) | (() => string)",
      "required": true,
      "description": "Returns a string representation of an array."
    },
    "unshift": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((...items: string[]) => number)\n  | ((...items: RadioOption[]) => number)",
      "required": true,
      "description": "Inserts new elements at the start of an array, and returns the new length of the array."
    },
    "values": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<string>)\n  | (() => IterableIterator<RadioOption>)",
      "required": true,
      "description": "Returns an iterable of values in the array"
    },
    "with": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((index: number, value: string) => string[])\n  | ((index: number, value: RadioOption) => RadioOption[])",
      "required": true,
      "description": "Copies an array, then overwrites the value at the provided index with the\ngiven value. If the index is negative, then it replaces from the end\nof the array."
    }
  },
  "InputField": {
    "errorBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is invalid. Use color keys in `theme.colors`"
    },
    "focusBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is focused. Use color keys in `theme.colors`"
    },
    "htmlSize": {
      "type": "number",
      "required": false,
      "description": "The native HTML `size` attribute to be passed to the `input`"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "leftAddon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "rightAddon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "type": { "type": "string", "required": false }
  },
  "NumberInputField": {
    "type": { "type": "\"number\"", "required": true },
    "allowMouseWheel": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the input's value will change based on mouse wheel"
    },
    "aria-describedby": { "type": "string", "required": false },
    "aria-label": { "type": "string", "required": false },
    "aria-labelledby": { "type": "string", "required": false },
    "clampValueOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "This controls the value update when you blur out of the input.\n- If `true` and the value is greater than `max`, the value will be reset to `max`\n- Else, the value remains the same."
    },
    "decrementIcon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Render a custom decrement icon."
    },
    "defaultValue": {
      "type": "string | number",
      "required": false,
      "description": "The initial value of the counter. Should be less than `max` and greater than `min`"
    },
    "errorBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is invalid. Use color keys in `theme.colors`"
    },
    "fieldProps": {
      "type": "NumberInputFieldProps",
      "required": false,
      "description": "Props to pass to the NumberInputField component."
    },
    "focusBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the input is focused. Use color keys in `theme.colors`"
    },
    "focusInputOnChange": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the input will be focused as you increment\nor decrement the value with the stepper"
    },
    "format": {
      "type": "(value: string | number) => string | number",
      "required": false,
      "description": "If using a custom display format, this converts the default format to the custom format."
    },
    "getAriaValueText": {
      "type": "(value: string | number) => string",
      "required": false,
      "description": "This is used to format the value so that screen readers\ncan speak out a more human-friendly value.\n\nIt is used to set the `aria-valuetext` property of the input"
    },
    "hideStepper": {
      "type": "boolean",
      "required": false,
      "description": "Hide the stepper."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The `id` to use for the number input field."
    },
    "incrementIcon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "Render a custom increment icon."
    },
    "inputMode": {
      "type": "type ONLY_FOR_FORMAT =\n  | \"search\"\n  | \"text\"\n  | \"email\"\n  | \"tel\"\n  | \"none\"\n  | \"url\"\n  | \"numeric\"\n  | \"decimal\"",
      "defaultValue": "decimal",
      "required": false,
      "description": "Hints at the type of data that might be entered by the user. It also determines\nthe type of keyboard shown to the user on mobile devices"
    },
    "isDisabled": {
      "type": "boolean",
      "required": false,
      "description": "Whether the input should be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the input will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the input will be in readonly mode"
    },
    "isRequired": {
      "type": "boolean",
      "required": false,
      "description": "Whether the input is required"
    },
    "isValidCharacter": {
      "type": "(value: string) => boolean",
      "required": false,
      "description": "Whether the pressed key should be allowed in the input.\nThe default behavior is to allow DOM floating point characters defined by /^[Ee0-9+\\-.]$/"
    },
    "keepWithinRange": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "This controls the value update behavior in general.\n\n- If `true` and you use the stepper or up/down arrow keys,\n the value will not exceed the `max` or go lower than `min`\n\n- If `false`, the value will be allowed to go out of range."
    },
    "max": {
      "type": "number",
      "defaultValue": "Number.MAX_SAFE_INTEGER",
      "required": false,
      "description": "The maximum value of the counter"
    },
    "min": {
      "type": "number",
      "defaultValue": "Number.MIN_SAFE_INTEGER",
      "required": false,
      "description": "The minimum value of the counter"
    },
    "name": {
      "type": "string",
      "required": false,
      "description": "The HTML `name` attribute used for forms"
    },
    "onBlur": {
      "type": "FocusEventHandler<HTMLInputElement>",
      "required": false
    },
    "onChange": {
      "type": "(valueAsString: string, valueAsNumber: number) => void",
      "required": false,
      "description": "The callback fired when the value changes"
    },
    "onFocus": {
      "type": "FocusEventHandler<HTMLInputElement>",
      "required": false
    },
    "onInvalid": {
      "type": "(\n  message: ValidityState,\n  value: string,\n  valueAsNumber: number,\n) => void",
      "required": false
    },
    "parse": {
      "type": "(value: string) => string",
      "required": false,
      "description": "If using a custom display format, this converts the custom format to a format `parseFloat` understands."
    },
    "pattern": {
      "type": "string",
      "defaultValue": "[0-9]*(.[0-9]+)?",
      "required": false,
      "description": "The pattern used to check the <input> element's value against on form submission."
    },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The placeholder text when no value is selected."
    },
    "precision": {
      "type": "number",
      "required": false,
      "description": "The number of decimal points used to round the value"
    },
    "step": {
      "type": "number",
      "defaultValue": "1",
      "required": false,
      "description": "The step used to increment or decrement the value"
    },
    "value": {
      "type": "string | number",
      "required": false,
      "description": "The value of the counter. Should be less than `max` and greater than `min`"
    }
  },
  "PinField": {
    "autoFocus": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the pin input receives focus on mount"
    },
    "defaultValue": {
      "type": "string",
      "required": false,
      "description": "The default value of the pin input"
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The top-level id string that will be applied to the input fields.\nThe index of the input will be appended to this top-level id."
    },
    "isDisabled": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the pin input component is put in the disabled state"
    },
    "isInvalid": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the pin input component is put in the invalid state"
    },
    "manageFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will move automatically to the next input once filled"
    },
    "mask": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the input's value will be masked just like `type=password`"
    },
    "onChange": {
      "type": "(value: string) => void",
      "required": false,
      "description": "Function called on input change"
    },
    "onComplete": {
      "type": "(value: string) => void",
      "required": false,
      "description": "Function called when all inputs have valid values"
    },
    "otp": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the pin input component signals to its fields that they should\nuse `autocomplete=\"one-time-code\"`."
    },
    "pinLength": { "type": "number", "required": false },
    "pinType": { "type": "\"number\" | \"alphanumeric\"", "required": false },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The placeholder for the pin input"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false
    },
    "value": {
      "type": "string",
      "required": false,
      "description": "The value of the pin input. This is the value\nthat will be returned when the pin input is filled"
    }
  },
  "SelectField": {
    "name": {
      "type": "string",
      "required": true,
      "description": "The name of the input field in a native form."
    },
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "autoSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the first enabled menu item will receive focus and be selected\nwhen the menu opens."
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "clippingParents",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier"
    },
    "buttonProps": { "type": "SelectButtonProps", "required": false },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when you click outside\nthe menu list"
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when a menu item is\nclicked"
    },
    "computePositionOnMount": { "type": "boolean", "required": false },
    "defaultIsOpen": { "type": "boolean", "required": false },
    "defaultValue": {
      "type": "string | string[]",
      "required": false,
      "description": "The initial value of the select field."
    },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "required": false,
      "description": "If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\nbecome 'top-left' and vice-verse"
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`\nand `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's\nabout to overflow its boundary area."
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "id": { "type": "string", "required": false },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isDisabled": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the select will be disabled."
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Performance 🚀:\nIf `true`, the MenuItem rendering will be deferred\nuntil the menu is open."
    },
    "isOpen": { "type": "boolean", "required": false },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "unmount",
      "required": false,
      "description": "Performance 🚀:\nThe lazy behavior of menu's content when not visible.\nOnly works when `isLazy={true}`\n\n- \"unmount\": The menu's content is always unmounted when not open.\n- \"keepMounted\": The menu's content initially unmounted,\nbut stays mounted when menu is open."
    },
    "listProps": { "type": "SelectListProps", "required": false },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "multiple": {
      "type": "boolean",
      "required": false,
      "description": "Enable multiple select."
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onChange": {
      "type": "(value: string | string[]) => void",
      "required": false,
      "description": "The callback invoked when the value of the select field changes."
    },
    "onClose": { "type": "() => void", "required": false },
    "onOpen": { "type": "() => void", "required": false },
    "options": {
      "type": "FieldOptions<SelectOption>",
      "required": false,
      "description": "An array of options\nIf you leave this empty the children prop will be rendered."
    },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The placeholder text when there's no value."
    },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure\nit's visible within the boundary area."
    },
    "renderValue": {
      "type": "(value: string | string[]) => ReactNode",
      "required": false,
      "description": "The function used to render the value of the select field."
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "absolute",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "value": {
      "type": "string | string[]",
      "required": false,
      "description": "The value of the select field."
    }
  },
  "SwitchField": {
    "aria-describedby": { "type": "string", "required": false },
    "aria-invalid": { "type": "true", "required": false },
    "aria-label": {
      "type": "string",
      "required": false,
      "description": "Defines the string that labels the checkbox element."
    },
    "aria-labelledby": {
      "type": "string",
      "required": false,
      "description": "Refers to the `id` of the element that labels the checkbox element."
    },
    "defaultChecked": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be initially checked."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "id assigned to input"
    },
    "isChecked": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be checked.\nYou'll need to pass `onChange` to update its value (since it is now controlled)"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be disabled"
    },
    "isFocusable": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true` and `isDisabled` is passed, the checkbox will\nremain tabbable but not interactive"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox is marked as invalid.\nChanges style of unchecked state."
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox input is marked as required,\nand `required` attribute will be added"
    },
    "name": {
      "type": "string",
      "required": false,
      "description": "The name of the input field in a checkbox\n(Useful for form submission)."
    },
    "onBlur": {
      "type": "(event: FocusEvent<HTMLInputElement, Element>) => void",
      "required": false,
      "description": "The callback invoked when the checkbox is blurred (loses focus)"
    },
    "onChange": {
      "type": "(event: ChangeEvent<HTMLInputElement>) => void",
      "required": false,
      "description": "The callback invoked when the checked state of the `Checkbox` changes."
    },
    "onFocus": {
      "type": "(event: FocusEvent<HTMLInputElement, Element>) => void",
      "required": false,
      "description": "The callback invoked when the checkbox is focused"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "defaultValue": "0.5rem",
      "required": false,
      "description": "The spacing between the switch and its label text"
    },
    "tabIndex": {
      "type": "number",
      "required": false,
      "description": "The tab-index property of the underlying input element."
    },
    "value": {
      "type": "string | number",
      "required": false,
      "description": "The value to be used in the checkbox input.\nThis is the value that will be returned on form submission."
    }
  },
  "TextareaField": {
    "errorBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the textarea is invalid. Use color keys in `theme.colors`"
    },
    "focusBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the textarea is focused. Use color keys in `theme.colors`"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    }
  },
  "CheckboxField": {
    "aria-describedby": { "type": "string", "required": false },
    "aria-invalid": { "type": "true", "required": false },
    "aria-label": {
      "type": "string",
      "required": false,
      "description": "Defines the string that labels the checkbox element."
    },
    "aria-labelledby": {
      "type": "string",
      "required": false,
      "description": "Refers to the `id` of the element that labels the checkbox element."
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "defaultValue": "CheckboxIcon",
      "required": false,
      "description": "The checked icon to use"
    },
    "iconColor": {
      "type": "string",
      "required": false,
      "description": "The color of the checkbox icon when checked or indeterminate"
    },
    "iconSize": {
      "type": "string | number",
      "required": false,
      "description": "The size of the checkbox icon when checked or indeterminate"
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "id assigned to input"
    },
    "inputProps": {
      "type": "InputHTMLAttributes<HTMLInputElement>",
      "required": false,
      "description": "Additional props to be forwarded to the `input` element"
    },
    "isChecked": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be checked.\nYou'll need to pass `onChange` to update its value (since it is now controlled)"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be disabled"
    },
    "isFocusable": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true` and `isDisabled` is passed, the checkbox will\nremain tabbable but not interactive"
    },
    "isIndeterminate": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be indeterminate.\nThis only affects the icon shown inside checkbox\nand does not modify the isChecked property."
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox is marked as invalid.\nChanges style of unchecked state."
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the checkbox input is marked as required,\nand `required` attribute will be added"
    },
    "name": {
      "type": "string",
      "required": false,
      "description": "The name of the input field in a checkbox\n(Useful for form submission)."
    },
    "onChange": {
      "type": "(event: ChangeEvent<HTMLInputElement>) => void",
      "required": false,
      "description": "The callback invoked when the checked state of the `Checkbox` changes."
    },
    "onFocus": {
      "type": "(event: FocusEvent<HTMLInputElement, Element>) => void",
      "required": false,
      "description": "The callback invoked when the checkbox is focused"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "defaultValue": "0.5rem",
      "required": false,
      "description": "The spacing between the checkbox and its label text"
    },
    "tabIndex": {
      "type": "number",
      "required": false,
      "description": "The tab-index property of the underlying input element."
    },
    "value": {
      "type": "string | number",
      "required": false,
      "description": "The value to be used in the checkbox input.\nThis is the value that will be returned on form submission."
    }
  },
  "NativeSelectField": {
    "errorBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the select is invalid. Use color keys in `theme.colors`"
    },
    "focusBorderColor": {
      "type": "string",
      "required": false,
      "description": "The border color when the select is focused. Use color keys in `theme.colors`"
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "The icon element to use in the select"
    },
    "iconColor": {
      "type": "string",
      "required": false,
      "description": "The color of the icon"
    },
    "iconSize": {
      "type": "string",
      "required": false,
      "description": "The size (width and height) of the icon"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "options": { "type": "Option[]", "required": false },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The placeholder for the select. We render an `<option/>` element that has\nempty value.\n\n```jsx\n<option value=\"\">{placeholder}</option>\n```"
    },
    "rootProps": {
      "type": "RootProps",
      "required": false,
      "description": "Props to forward to the root `div` element"
    }
  },
  "RadioField": {
    "options": { "type": "RadioOptions", "required": true },
    "defaultValue": {
      "type": "string",
      "required": false,
      "description": "The value of the radio to be `checked`\ninitially (in uncontrolled mode)"
    },
    "direction": { "type": "StackDirection", "required": false },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, all wrapped radio inputs will be disabled"
    },
    "isFocusable": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true` and `isDisabled` is true, all wrapped radio inputs will remain\nfocusable but not interactive."
    },
    "isNative": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, input elements will receive\n`checked` attribute instead of `isChecked`.\n\nThis assumes, you're using native radio inputs"
    },
    "name": {
      "type": "string",
      "required": false,
      "description": "The `name` attribute forwarded to each `radio` element"
    },
    "onChange": {
      "type": "(nextValue: string) => void",
      "required": false,
      "description": "Function called once a radio is checked"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false
    },
    "value": {
      "type": "string",
      "required": false,
      "description": "The value of the radio to be `checked`\n(in controlled mode)"
    }
  },
  "Field": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "label": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    }
  },
  "BaseField": {
    "name": {
      "type": "TName | ArrayFieldPath<TName>",
      "required": true,
      "description": "The field name"
    },
    "help": {
      "type": "string",
      "required": false,
      "description": "Field help text"
    },
    "hideLabel": {
      "type": "boolean",
      "required": false,
      "description": "Hide the field label"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be disabled. This has 2 side effects:\n- The `FormLabel` will have `data-disabled` attribute\n- The form element (e.g, Input) will be disabled"
    },
    "isInvalid": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be invalid. This has 2 side effects:\n- The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n- The form element (e.g, Input) will have `aria-invalid` set to `true`"
    },
    "isReadOnly": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be readonly"
    },
    "isRequired": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the form control will be required. This has 2 side effects:\n- The `FormLabel` will show a required indicator\n- The form element (e.g, Input) will have `aria-required` set to `true`"
    },
    "label": {
      "type": "string",
      "required": false,
      "description": "The field label"
    },
    "placeholder": {
      "type": "string",
      "required": false,
      "description": "The input placeholder"
    },
    "rules": {
      "type": "Omit<\n  RegisterOptions<TFieldValues, TName>,\n  \"disabled\" | \"setValueAs\" | \"valueAsDate\" | \"valueAsNumber\"\n>",
      "required": false,
      "description": "React hook form rules"
    },
    "type": {
      "type": "string",
      "required": false,
      "description": "Build-in types:\ntext, number, password, textarea, select, native-select, checkbox, radio, switch, pin\n\nWill default to a text field if there is no matching type."
    }
  },
  "FieldOptions": {
    "__@iterator@38027": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<string>)\n  | (() => IterableIterator<TOption>)",
      "required": true,
      "description": "Iterator"
    },
    "__@unscopables@39477": {
      "type": "{ [x: number]: boolean | undefined; length?: boolean | undefined; toString?: boolean | undefined; toLocaleString?: boolean | undefined; pop?: boolean | undefined; push?: boolean | undefined; ... 35 more ...; readonly [Symbol.unscopables]?: boolean | undefined; } | { ...; }",
      "required": true,
      "description": "Is an object whose properties have the value 'true'\nwhen they will be absent when used in a 'with' statement."
    },
    "at": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((index: number) => string | undefined)\n  | ((index: number) => TOption | undefined)",
      "required": true,
      "description": "Returns the item located at the specified index."
    },
    "concat": {
      "type": "{ (...items: ConcatArray<string>[]): string[]; (...items: (string | ConcatArray<string>)[]): string[]; } | { (...items: ConcatArray<TOption>[]): TOption[]; (...items: (TOption | ConcatArray<...>)[]): TOption[]; }",
      "required": true,
      "description": "Combines two or more arrays.\nThis method returns a new array without modifying any existing arrays."
    },
    "copyWithin": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((target: number, start: number, end?: number | undefined) => string[])\n  | ((target: number, start: number, end?: number | undefined) => TOption[])",
      "required": true,
      "description": "Returns the this object after copying a section of the array identified by start and end\nto the same array starting at position target"
    },
    "entries": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<[number, string]>)\n  | (() => IterableIterator<[number, TOption]>)",
      "required": true,
      "description": "Returns an iterable of key, value pairs for every entry in the array"
    },
    "every": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): this is S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): boolean; } | { ...; }",
      "required": true,
      "description": "Determines whether all the members of an array satisfy the specified test."
    },
    "fill": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      value: string,\n      start?: number | undefined,\n      end?: number | undefined,\n    ) => string[])\n  | ((\n      value: TOption,\n      start?: number | undefined,\n      end?: number | undefined,\n    ) => TOption[])",
      "required": true,
      "description": "Changes all array elements from `start` to `end` index to a static `value` and returns the modified array"
    },
    "filter": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S[]; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]; } | { ...; }",
      "required": true,
      "description": "Returns the elements of an array that meet the condition specified in a callback function."
    },
    "find": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, obj: string[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: string, index: number, obj: string[]) => unknown, thisArg?: any): string | undefined; } | { ...; }",
      "required": true,
      "description": "Returns the value of the first element in the array where predicate is true, and undefined\notherwise."
    },
    "findIndex": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      predicate: (value: string, index: number, obj: string[]) => unknown,\n      thisArg?: any,\n    ) => number)\n  | ((\n      predicate: (value: TOption, index: number, obj: TOption[]) => unknown,\n      thisArg?: any,\n    ) => number)",
      "required": true,
      "description": "Returns the index of the first element in the array where predicate is true, and -1\notherwise."
    },
    "findLast": {
      "type": "{ <S extends string>(predicate: (value: string, index: number, array: string[]) => value is S, thisArg?: any): S | undefined; (predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string | undefined; } | { ...; }",
      "required": true,
      "description": "Returns the value of the last element in the array where predicate is true, and undefined\notherwise."
    },
    "findLastIndex": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      predicate: (value: string, index: number, array: string[]) => unknown,\n      thisArg?: any,\n    ) => number)\n  | ((\n      predicate: (value: TOption, index: number, array: TOption[]) => unknown,\n      thisArg?: any,\n    ) => number)",
      "required": true,
      "description": "Returns the index of the last element in the array where predicate is true, and -1\notherwise."
    },
    "flat": {
      "type": "type ONLY_FOR_FORMAT =\n  | (<A, D extends number = 1>(\n      this: A,\n      depth?: D | undefined,\n    ) => FlatArray<A, D>[])\n  | (<A, D extends number = 1>(\n      this: A,\n      depth?: D | undefined,\n    ) => FlatArray<A, D>[])",
      "required": true,
      "description": "Returns a new array with all sub-array elements concatenated into it recursively up to the\nspecified depth."
    },
    "flatMap": {
      "type": "type ONLY_FOR_FORMAT =\n  | (<U, This = undefined>(\n      callback: (\n        this: This,\n        value: string,\n        index: number,\n        array: string[],\n      ) => U | readonly U[],\n      thisArg?: This | undefined,\n    ) => U[])\n  | (<U, This = undefined>(\n      callback: (\n        this: This,\n        value: TOption,\n        index: number,\n        array: TOption[],\n      ) => U | readonly U[],\n      thisArg?: This | undefined,\n    ) => U[])",
      "required": true,
      "description": "Calls a defined callback function on each element of an array. Then, flattens the result into\na new array.\nThis is identical to a map followed by flat with depth 1."
    },
    "forEach": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      callbackfn: (value: string, index: number, array: string[]) => void,\n      thisArg?: any,\n    ) => void)\n  | ((\n      callbackfn: (value: TOption, index: number, array: TOption[]) => void,\n      thisArg?: any,\n    ) => void)",
      "required": true,
      "description": "Performs the specified action for each element in an array."
    },
    "includes": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((searchElement: string, fromIndex?: number | undefined) => boolean)\n  | ((searchElement: TOption, fromIndex?: number | undefined) => boolean)",
      "required": true,
      "description": "Determines whether an array includes a certain element, returning true or false as appropriate."
    },
    "indexOf": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((searchElement: string, fromIndex?: number | undefined) => number)\n  | ((searchElement: TOption, fromIndex?: number | undefined) => number)",
      "required": true,
      "description": "Returns the index of the first occurrence of a value in an array, or -1 if it is not present."
    },
    "join": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((separator?: string | undefined) => string)\n  | ((separator?: string | undefined) => string)",
      "required": true,
      "description": "Adds all the elements of an array into a string, separated by the specified separator string."
    },
    "keys": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<number>)\n  | (() => IterableIterator<number>)",
      "required": true,
      "description": "Returns an iterable of keys in the array"
    },
    "lastIndexOf": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((searchElement: string, fromIndex?: number | undefined) => number)\n  | ((searchElement: TOption, fromIndex?: number | undefined) => number)",
      "required": true,
      "description": "Returns the index of the last occurrence of a specified value in an array, or -1 if it is not present."
    },
    "length": {
      "type": "number",
      "required": true,
      "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
    },
    "map": {
      "type": "type ONLY_FOR_FORMAT =\n  | (<U>(\n      callbackfn: (value: string, index: number, array: string[]) => U,\n      thisArg?: any,\n    ) => U[])\n  | (<U>(\n      callbackfn: (value: TOption, index: number, array: TOption[]) => U,\n      thisArg?: any,\n    ) => U[])",
      "required": true,
      "description": "Calls a defined callback function on each element of an array, and returns an array that contains the results."
    },
    "pop": {
      "type": "(() => string | undefined) | (() => TOption | undefined)",
      "required": true,
      "description": "Removes the last element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
    },
    "push": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((...items: string[]) => number)\n  | ((...items: TOption[]) => number)",
      "required": true,
      "description": "Appends new elements to the end of an array, and returns the new length of the array."
    },
    "reduce": {
      "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
      "required": true,
      "description": "Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
    },
    "reduceRight": {
      "type": "{ (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string): string; (callbackfn: (previousValue: string, currentValue: string, currentIndex: number, array: string[]) => string, initialValue: string): string; <U>(callbackfn: (previousValue: U, currentValue: string, ...",
      "required": true,
      "description": "Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function."
    },
    "reverse": {
      "type": "(() => string[]) | (() => TOption[])",
      "required": true,
      "description": "Reverses the elements in an array in place.\nThis method mutates the array and returns a reference to the same array."
    },
    "shift": {
      "type": "(() => string | undefined) | (() => TOption | undefined)",
      "required": true,
      "description": "Removes the first element from an array and returns it.\nIf the array is empty, undefined is returned and the array is not modified."
    },
    "slice": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((start?: number | undefined, end?: number | undefined) => string[])\n  | ((start?: number | undefined, end?: number | undefined) => TOption[])",
      "required": true,
      "description": "Returns a copy of a section of an array.\nFor both start and end, a negative index can be used to indicate an offset from the end of the array.\nFor example, -2 refers to the second to last element of the array."
    },
    "some": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((\n      predicate: (value: string, index: number, array: string[]) => unknown,\n      thisArg?: any,\n    ) => boolean)\n  | ((\n      predicate: (value: TOption, index: number, array: TOption[]) => unknown,\n      thisArg?: any,\n    ) => boolean)",
      "required": true,
      "description": "Determines whether the specified callback function returns true for any element of an array."
    },
    "sort": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((compareFn?: ((a: string, b: string) => number) | undefined) => string[])\n  | ((\n      compareFn?: ((a: TOption, b: TOption) => number) | undefined,\n    ) => TOption[])",
      "required": true,
      "description": "Sorts an array in place.\nThis method mutates the array and returns a reference to the same array."
    },
    "splice": {
      "type": "type ONLY_FOR_FORMAT =\n  | {\n      (start: number, deleteCount?: number | undefined): string[]\n      (start: number, deleteCount: number, ...items: string[]): string[]\n    }\n  | {\n      (start: number, deleteCount?: number | undefined): TOption[]\n      (start: number, deleteCount: number, ...items: TOption[]): TOption[]\n    }",
      "required": true,
      "description": "Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements."
    },
    "toLocaleString": {
      "type": "(() => string) | (() => string)",
      "required": true,
      "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods."
    },
    "toReversed": {
      "type": "(() => string[]) | (() => TOption[])",
      "required": true,
      "description": "Returns a copy of an array with its elements reversed."
    },
    "toSorted": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((compareFn?: ((a: string, b: string) => number) | undefined) => string[])\n  | ((\n      compareFn?: ((a: TOption, b: TOption) => number) | undefined,\n    ) => TOption[])",
      "required": true,
      "description": "Returns a copy of an array with its elements sorted."
    },
    "toSpliced": {
      "type": "type ONLY_FOR_FORMAT =\n  | {\n      (start: number, deleteCount: number, ...items: string[]): string[]\n      (start: number, deleteCount?: number | undefined): string[]\n    }\n  | {\n      (start: number, deleteCount: number, ...items: TOption[]): TOption[]\n      (start: number, deleteCount?: number | undefined): TOption[]\n    }",
      "required": true,
      "description": "Copies an array and removes elements and, if necessary, inserts new elements in their place. Returns the copied array.\n\n\nCopies an array and removes elements while returning the remaining elements."
    },
    "toString": {
      "type": "(() => string) | (() => string)",
      "required": true,
      "description": "Returns a string representation of an array."
    },
    "unshift": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((...items: string[]) => number)\n  | ((...items: TOption[]) => number)",
      "required": true,
      "description": "Inserts new elements at the start of an array, and returns the new length of the array."
    },
    "values": {
      "type": "type ONLY_FOR_FORMAT =\n  | (() => IterableIterator<string>)\n  | (() => IterableIterator<TOption>)",
      "required": true,
      "description": "Returns an iterable of values in the array"
    },
    "with": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((index: number, value: string) => string[])\n  | ((index: number, value: TOption) => TOption[])",
      "required": true,
      "description": "Copies an array, then overwrites the value at the provided index with the\ngiven value. If the index is negative, then it replaces from the end\nof the array."
    }
  },
  "CreateForm": {
    "fieldResolver": { "type": "GetFieldResolver", "required": false },
    "fields": {
      "type": "type ONLY_FOR_FORMAT =\n  FieldDefs extends Record<string, FC<any>> ? FieldDefs : never",
      "required": false
    },
    "resolver": { "type": "GetResolver", "required": false }
  },
  "CreateFieldOptions": {
    "BaseField": { "type": "FC<any>", "required": false },
    "hideLabel": { "type": "boolean", "required": false },
    "isControlled": { "type": "boolean", "required": false }
  },
  "Form": {
    "onSubmit": {
      "type": "SubmitHandler<TFieldValues>",
      "required": true,
      "description": "The submit handler."
    },
    "children": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: FormRenderContext<...>) => ReactNode)",
      "required": false,
      "description": "The form children, can be a render prop or a ReactNode."
    },
    "colorScheme": {
      "type": "\"whiteAlpha\" | \"blackAlpha\" | \"gray\" | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"teal\" | \"blue\" | \"cyan\" | \"purple\" | \"pink\" | \"linkedin\" | \"facebook\" | \"messenger\" | \"whatsapp\" | \"twitter\" | \"telegram\" | \"primary\" | \"secondary\" | \"indigo\"",
      "required": false,
      "description": "The visual color appearance of the component"
    },
    "context": { "type": "TContext", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "type ONLY_FOR_FORMAT =\n  | AsyncDefaultValues<TFieldValues>\n  | DefaultValues<TFieldValues>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<TFieldValues>", "required": false },
    "fieldResolver": {
      "type": "FieldResolver",
      "required": false,
      "description": "The field resolver, used to resolve the fields from schemas."
    },
    "fields": {
      "type": "DefaultFieldOverrides",
      "required": false,
      "description": "Field overrides"
    },
    "formRef": {
      "type": "RefObject<UseFormReturn<TFieldValues, TContext>>",
      "required": false,
      "description": "The Hook Form state ref."
    },
    "mode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "onChange": {
      "type": "WatchObserver<TFieldValues>",
      "required": false,
      "description": "Triggers when any of the field change."
    },
    "onError": {
      "type": "SubmitErrorHandler<TFieldValues>",
      "required": false,
      "description": "Triggers when there are validation errors."
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": {
      "type": "Resolver<TFieldValues, TContext>",
      "required": false
    },
    "reValidateMode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\"",
      "required": false
    },
    "schema": {
      "type": "NonNullable<TSchema>",
      "required": false,
      "description": "The form schema."
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "size": {
      "type": "string",
      "required": false,
      "description": "The size of the Form"
    },
    "values": { "type": "TFieldValues", "required": false },
    "variant": {
      "type": "\"horizontal\"",
      "required": false,
      "description": "The variant of the Form"
    }
  },
  "CreateStepForm": {
    "fieldResolver": { "type": "GetFieldResolver", "required": false },
    "fields": {
      "type": "type ONLY_FOR_FORMAT =\n  FieldDefs extends Record<string, FC<any>> ? FieldDefs : never",
      "required": false
    },
    "resolver": { "type": "GetResolver", "required": false }
  },
  "Controller": {
    "name": { "type": "TName", "required": true },
    "render": {
      "type": "({ field, fieldState, formState, }: { field: ControllerRenderProps<TFieldValues, TName>; fieldState: ControllerFieldState; formState: UseFormStateReturn<TFieldValues>; }) => ReactElement<...>",
      "required": true
    },
    "control": { "type": "Control<TFieldValues>", "required": false },
    "defaultValue": {
      "type": "NonNullable<PathValue<TFieldValues, TName>>",
      "required": false
    },
    "disabled": { "type": "boolean", "required": false },
    "rules": {
      "type": "Omit<\n  RegisterOptions<TFieldValues, TName>,\n  \"disabled\" | \"setValueAs\" | \"valueAsDate\" | \"valueAsNumber\"\n>",
      "required": false
    },
    "shouldUnregister": { "type": "boolean", "required": false }
  },
  "ControllerRender": {
    "name": { "type": "TName", "required": true },
    "onBlur": { "type": "Noop", "required": true },
    "onChange": { "type": "(...event: any[]) => void", "required": true },
    "ref": { "type": "RefCallBack", "required": true },
    "disabled": { "type": "boolean", "required": false },
    "value": {
      "type": "NonNullable<FieldPathValue<TFieldValues, TName>>",
      "required": false
    }
  },
  "FieldArrayMethod": {
    "focusIndex": { "type": "number", "required": false },
    "focusName": { "type": "string", "required": false },
    "shouldFocus": { "type": "boolean", "required": false }
  },
  "FormProvider": {
    "clearErrors": {
      "type": "UseFormClearErrors<TFieldValues>",
      "required": true
    },
    "control": {
      "type": "Control<TFieldValues, TContext, TFieldValues>",
      "required": true
    },
    "formState": { "type": "FormState<TFieldValues>", "required": true },
    "getFieldState": {
      "type": "UseFormGetFieldState<TFieldValues>",
      "required": true
    },
    "getValues": { "type": "UseFormGetValues<TFieldValues>", "required": true },
    "handleSubmit": {
      "type": "UseFormHandleSubmit<TFieldValues, TFieldValues>",
      "required": true
    },
    "register": { "type": "UseFormRegister<TFieldValues>", "required": true },
    "reset": { "type": "UseFormReset<TFieldValues>", "required": true },
    "resetField": {
      "type": "UseFormResetField<TFieldValues>",
      "required": true
    },
    "setError": { "type": "UseFormSetError<TFieldValues>", "required": true },
    "setFocus": { "type": "UseFormSetFocus<TFieldValues>", "required": true },
    "setValue": { "type": "UseFormSetValue<TFieldValues>", "required": true },
    "trigger": { "type": "UseFormTrigger<TFieldValues>", "required": true },
    "unregister": {
      "type": "UseFormUnregister<TFieldValues>",
      "required": true
    },
    "watch": { "type": "UseFormWatch<TFieldValues>", "required": true },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode\n  | ReactNode[]",
      "required": false
    },
    "fieldResolver": { "type": "FieldResolver", "required": false },
    "fields": { "type": "{ [key: string]: unknown }", "required": false },
    "schema": { "type": "NonNullable<TSchema>", "required": false }
  },
  "KeepStateOptions": {
    "keepDefaultValues": { "type": "boolean", "required": false },
    "keepDirty": { "type": "boolean", "required": false },
    "keepDirtyValues": { "type": "boolean", "required": false },
    "keepErrors": { "type": "boolean", "required": false },
    "keepIsSubmitSuccessful": { "type": "boolean", "required": false },
    "keepIsSubmitted": { "type": "boolean", "required": false },
    "keepIsValid": { "type": "boolean", "required": false },
    "keepSubmitCount": { "type": "boolean", "required": false },
    "keepTouched": { "type": "boolean", "required": false },
    "keepValues": { "type": "boolean", "required": false }
  },
  "RegisterOptions": {
    "deps": { "type": "string | string[]", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "max": { "type": "ValidationRule<string | number>", "required": false },
    "maxLength": { "type": "ValidationRule<number>", "required": false },
    "min": { "type": "ValidationRule<string | number>", "required": false },
    "minLength": { "type": "ValidationRule<number>", "required": false },
    "onBlur": { "type": "(event: any) => void", "required": false },
    "onChange": { "type": "(event: any) => void", "required": false },
    "pattern": { "type": "ValidationRule<RegExp>", "required": false },
    "required": {
      "type": "string | ValidationRule<boolean>",
      "required": false
    },
    "setValueAs": { "type": "(value: any) => any", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "validate": {
      "type": "type ONLY_FOR_FORMAT =\n  | Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n  | Record<\n      string,\n      Validate<FieldPathValue<TFieldValues, TFieldName>, TFieldValues>\n    >",
      "required": false
    },
    "value": {
      "type": "NonNullable<FieldPathValue<TFieldValues, TFieldName>>",
      "required": false
    },
    "valueAsDate": { "type": "boolean", "required": false },
    "valueAsNumber": { "type": "boolean", "required": false }
  },
  "ResolverOptions": {
    "fields": {
      "type": "Record<\n  string,\n  {\n    ref: Ref\n    name: string\n    refs?: HTMLInputElement[] | undefined\n    mount?: boolean | undefined\n  } & RegisterOptions\n>",
      "required": true
    },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "names": { "type": "FieldName<TFieldValues>[]", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false }
  },
  "UseController": {
    "name": { "type": "TName", "required": true },
    "control": { "type": "Control<TFieldValues>", "required": false },
    "defaultValue": {
      "type": "NonNullable<FieldPathValue<TFieldValues, TName>>",
      "required": false
    },
    "disabled": { "type": "boolean", "required": false },
    "rules": {
      "type": "Omit<\n  RegisterOptions<TFieldValues, TName>,\n  \"disabled\" | \"setValueAs\" | \"valueAsDate\" | \"valueAsNumber\"\n>",
      "required": false
    },
    "shouldUnregister": { "type": "boolean", "required": false }
  },
  "UseFieldArray": {
    "name": { "type": "TFieldArrayName", "required": true },
    "control": { "type": "Control<TFieldValues>", "required": false },
    "keyName": { "type": "TKeyName", "required": false },
    "rules": {
      "type": "{ validate?: Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues> | Record<string, Validate<FieldArray<TFieldValues, TFieldArrayName>[], TFieldValues>> | undefined; } & Pick<...>",
      "required": false
    },
    "shouldUnregister": { "type": "boolean", "required": false }
  },
  "UseForm": {
    "context": { "type": "NonNullable<TContext>", "required": false },
    "criteriaMode": { "type": "CriteriaMode", "required": false },
    "defaultValues": {
      "type": "type ONLY_FOR_FORMAT =\n  | AsyncDefaultValues<TFieldValues>\n  | DefaultValues<TFieldValues>",
      "required": false
    },
    "delayError": { "type": "number", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "errors": { "type": "FieldErrors<TFieldValues>", "required": false },
    "mode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\" | \"all\" | \"onTouched\"",
      "required": false
    },
    "progressive": { "type": "boolean", "required": false },
    "resetOptions": {
      "type": "Partial<{\n  keepDirtyValues: boolean\n  keepErrors: boolean\n  keepDirty: boolean\n  keepValues: boolean\n  keepDefaultValues: boolean\n  keepIsSubmitted: boolean\n  keepIsSubmitSuccessful: boolean\n  keepTouched: boolean\n  keepIsValid: boolean\n  keepSubmitCount: boolean\n}>",
      "required": false
    },
    "resolver": {
      "type": "Resolver<TFieldValues, TContext>",
      "required": false
    },
    "reValidateMode": {
      "type": "\"onChange\" | \"onBlur\" | \"onSubmit\"",
      "required": false
    },
    "shouldFocusError": { "type": "boolean", "required": false },
    "shouldUnregister": { "type": "boolean", "required": false },
    "shouldUseNativeValidation": { "type": "boolean", "required": false },
    "values": { "type": "TFieldValues", "required": false }
  },
  "UseFormState": {
    "control": {
      "type": "Control<TFieldValues, any, TFieldValues>",
      "required": false
    },
    "disabled": { "type": "boolean", "required": false },
    "exact": { "type": "boolean", "required": false },
    "name": {
      "type": "type ONLY_FOR_FORMAT =\n  | FieldPath<TFieldValues>\n  | FieldPath<TFieldValues>[]\n  | readonly FieldPath<TFieldValues>[]",
      "required": false
    }
  },
  "UseWatch": {
    "control": {
      "type": "Control<TFieldValues, any, TFieldValues>",
      "required": false
    },
    "defaultValue": { "type": "{}", "required": false },
    "disabled": { "type": "boolean", "required": false },
    "exact": { "type": "boolean", "required": false },
    "name": {
      "type": "type ONLY_FOR_FORMAT =\n  | FieldPath<TFieldValues>\n  | FieldPath<TFieldValues>[]\n  | readonly FieldPath<TFieldValues>[]",
      "required": false
    }
  }
}
