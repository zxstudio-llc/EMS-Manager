{
  "Beacon": {},
  "BenefitsModalContainer": {
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom/pinch gestures on iOS devices when scroll locking is enabled."
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will autofocus the first enabled and interactive\nelement within the `ModalContent`"
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed"
    },
    "closeOnOverlayClick": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked"
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal closes."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The `id` of the modal"
    },
    "initialFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal opens."
    },
    "isCentered": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the modal will be centered on screen."
    },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the modal will be open."
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active\n- If `false`:  allows focus to move outside of iframe"
    },
    "motionPreset": {
      "type": "MotionPreset",
      "defaultValue": "scale",
      "required": false,
      "description": "The transition that should be used for the modal"
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked to close the modal."
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Fires when all exiting nodes have completed animating out"
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal"
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "portalProps": {
      "type": "Pick<\n  PortalProps,\n  \"appendToParentPortal\" | \"containerRef\"\n>",
      "required": false,
      "description": "Props to be forwarded to the portal component"
    },
    "preserveScrollBarGap": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, a `padding-right` will be applied to the body element\nthat's equal to the width of the scrollbar.\n\nThis can help prevent some unpleasant flickering effect\nand content adjustment when the modal opens"
    },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will return focus to the element that triggered it when it closes."
    },
    "scrollBehavior": {
      "type": "ScrollBehavior",
      "defaultValue": "outside",
      "required": false,
      "description": "Where scroll behavior should originate.\n- If set to `inside`, scroll only occurs within the `ModalBody`.\n- If set to `outside`, the entire `ModalContent` will scroll within the viewport."
    },
    "trapFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `false`, focus lock will be disabled completely.\n\nThis is useful in situations where you still need to interact with\nother surrounding elements.\n\nðŸš¨Warning: We don't recommend doing this because it hurts the\naccessibility of the modal, based on WAI-ARIA specifications."
    },
    "useInert": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\nset to `true` so that screen readers can only see the `modal`.\n\nThis is commonly known as making the other elements **inert**"
    }
  },
  "BenefitsModalMedia": {
    "ratio": {
      "type": "ResponsiveValue<number>",
      "required": false,
      "description": "The aspect ratio of the Box. Common values are:\n\n`21/9`, `16/9`, `9/16`, `4/3`, `1.85/1`"
    },
    "src": { "type": "string", "required": false }
  },
  "BenefitsModal": {
    "allowPinchZoom": {
      "type": "boolean",
      "defaultValue": "false.",
      "required": false,
      "description": "Handle zoom/pinch gestures on iOS devices when scroll locking is enabled."
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will autofocus the first enabled and interactive\nelement within the `ModalContent`"
    },
    "blockScrollOnMount": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, scrolling will be disabled on the `body` when the modal opens."
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the `Esc` key is pressed"
    },
    "closeOnOverlayClick": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will close when the overlay is clicked"
    },
    "finalFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal closes."
    },
    "hideCloseButton": {
      "type": "boolean",
      "required": false,
      "description": "Hide the close button"
    },
    "hideOverlay": {
      "type": "boolean",
      "required": false,
      "description": "Hide the overlay"
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The `id` of the modal"
    },
    "initialFocusRef": {
      "type": "RefObject<FocusableElement>",
      "required": false,
      "description": "The `ref` of element to receive focus when the modal opens."
    },
    "isCentered": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "Render the modal in the center of the screen"
    },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the modal will be open."
    },
    "lockFocusAcrossFrames": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Enables aggressive focus capturing within iframes.\n- If `true`: keep focus in the lock, no matter where lock is active\n- If `false`:  allows focus to move outside of iframe"
    },
    "motionPreset": {
      "type": "MotionPreset",
      "defaultValue": "scale",
      "required": false,
      "description": "The transition that should be used for the modal"
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback invoked to close the modal."
    },
    "onCloseComplete": {
      "type": "() => void",
      "required": false,
      "description": "Fires when all exiting nodes have completed animating out"
    },
    "onEsc": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the escape key is pressed and focus is within modal"
    },
    "onOverlayClick": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the overlay is clicked."
    },
    "portalProps": {
      "type": "Pick<\n  PortalProps,\n  \"appendToParentPortal\" | \"containerRef\"\n>",
      "required": false,
      "description": "Props to be forwarded to the portal component"
    },
    "preserveScrollBarGap": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, a `padding-right` will be applied to the body element\nthat's equal to the width of the scrollbar.\n\nThis can help prevent some unpleasant flickering effect\nand content adjustment when the modal opens"
    },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the modal will return focus to the element that triggered it when it closes."
    },
    "scrollBehavior": {
      "type": "ScrollBehavior",
      "defaultValue": "outside",
      "required": false,
      "description": "Where scroll behavior should originate.\n- If set to `inside`, scroll only occurs within the `ModalBody`.\n- If set to `outside`, the entire `ModalContent` will scroll within the viewport."
    },
    "trapFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `false`, focus lock will be disabled completely.\n\nThis is useful in situations where you still need to interact with\nother surrounding elements.\n\nðŸš¨Warning: We don't recommend doing this because it hurts the\naccessibility of the modal, based on WAI-ARIA specifications."
    },
    "useInert": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\nset to `true` so that screen readers can only see the `modal`.\n\nThis is commonly known as making the other elements **inert**"
    }
  },
  "TourDialogActions": {
    "isAttached": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the borderRadius of button that are direct children will be altered\nto look flushed together"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, all wrapped button will be disabled"
    },
    "primaryActionProps": { "type": "ButtonProps", "required": false },
    "secondaryActionProps": { "type": "ButtonProps", "required": false },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"1\" | \"2\" | \"3\" | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"-1\" | \"-2\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "defaultValue": "'0.5rem'",
      "required": false,
      "description": "The spacing between the buttons"
    }
  },
  "TourDialogContainer": {
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "arrowShadowColor": {
      "type": "string",
      "required": false,
      "description": "The `box-shadow` of the popover arrow"
    },
    "arrowSize": {
      "type": "number",
      "required": false,
      "description": "The size of the popover arrow"
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be transferred to the first interactive element\nwhen the popover opens"
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "clippingParents",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier"
    },
    "children": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: { ...; }) => ReactNode)",
      "required": false,
      "description": "The content of the popover. It is usually the `PopoverTrigger`,\nand `PopoverContent`"
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "Delay in milliseconds before the popover closes after a trigger event.\nOnly works when `trigger=\"hover\"`"
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you blur out it by\nclicking outside or tabbing out"
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you hit the `Esc` key"
    },
    "computePositionOnMount": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be positioned when it mounts\n(even if it's not open)\n\nNote ðŸš¨: We don't recommend using this in a popover/menu intensive UI or page\nas it might affect scrolling performance."
    },
    "defaultIsOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be initially opened."
    },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "defaultValue": "ltr",
      "required": false,
      "description": "Theme direction `ltr` or `rtl`. Popper's placement will\nbe set accordingly"
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`\nand `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's\nabout to overflow its boundary area."
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The html `id` attribute of the popover.\nIf not provided, we generate a unique id.\n\nThis `id` is also used to auto-generate the `aria-labelledby`\nand `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`"
    },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isLazy": {
      "type": "boolean",
      "required": false,
      "description": "Performance ðŸš€:\nIf `true`, the PopoverContent rendering will be deferred\nuntil the popover is open."
    },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be opened in controlled mode."
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "unmount",
      "required": false,
      "description": "Performance ðŸš€:\nThe lazy behavior of popover's content when not visible.\nOnly works when `isLazy={true}`\n\n- \"unmount\": The popover's content is always unmounted when not open.\n- \"keepMounted\": The popover's content initially unmounted,\nbut stays mounted when popover is open."
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover closes"
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover opens"
    },
    "onSubmit": { "type": "() => Promise<any>", "required": false },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "Delay in milliseconds before the popover opens after a trigger event.\nOnly works when `trigger=\"hover\"`"
    },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure\nit's visible within the boundary area."
    },
    "primaryAction": { "type": "ButtonProps", "required": false },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be returned to the element that triggers the popover\nwhen it closes"
    },
    "secondaryAction": { "type": "ButtonProps", "required": false },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "absolute",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "trigger": {
      "type": "\"click\" | \"hover\"",
      "defaultValue": "click",
      "required": false,
      "description": "The interaction that triggers the popover.\n\n`hover` - means the popover will open when you hover with mouse or\nfocus with keyboard on the popover trigger\n\n`click` - means the popover will open on click or\npress `Enter` to `Space` on keyboard"
    }
  },
  "TourDialog": {
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "arrowShadowColor": {
      "type": "string",
      "required": false,
      "description": "The `box-shadow` of the popover arrow"
    },
    "arrowSize": {
      "type": "number",
      "required": false,
      "description": "The size of the popover arrow"
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be transferred to the first interactive element\nwhen the popover opens"
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "clippingParents",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier"
    },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false,
      "description": "The content of the popover. It is usually the `PopoverTrigger`,\nand `PopoverContent`"
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "Delay in milliseconds before the popover closes after a trigger event.\nOnly works when `trigger=\"hover\"`"
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you blur out it by\nclicking outside or tabbing out"
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you hit the `Esc` key"
    },
    "computePositionOnMount": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be positioned when it mounts\n(even if it's not open)\n\nNote ðŸš¨: We don't recommend using this in a popover/menu intensive UI or page\nas it might affect scrolling performance."
    },
    "data-target": {
      "type": "string",
      "required": false,
      "description": "The Spotlight target when used in a Tour."
    },
    "defaultIsOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be initially opened."
    },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "defaultValue": "ltr",
      "required": false,
      "description": "Theme direction `ltr` or `rtl`. Popper's placement will\nbe set accordingly"
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`\nand `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's\nabout to overflow its boundary area."
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "hideArrow": {
      "type": "boolean",
      "required": false,
      "description": "Hide the arrow"
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The html `id` attribute of the popover.\nIf not provided, we generate a unique id.\n\nThis `id` is also used to auto-generate the `aria-labelledby`\nand `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`"
    },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isLazy": {
      "type": "boolean",
      "required": false,
      "description": "Performance ðŸš€:\nIf `true`, the PopoverContent rendering will be deferred\nuntil the popover is open."
    },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be opened in controlled mode."
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "unmount",
      "required": false,
      "description": "Performance ðŸš€:\nThe lazy behavior of popover's content when not visible.\nOnly works when `isLazy={true}`\n\n- \"unmount\": The popover's content is always unmounted when not open.\n- \"keepMounted\": The popover's content initially unmounted,\nbut stays mounted when popover is open."
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover closes"
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover opens"
    },
    "onSubmit": { "type": "() => Promise<any>", "required": false },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "Delay in milliseconds before the popover opens after a trigger event.\nOnly works when `trigger=\"hover\"`"
    },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure\nit's visible within the boundary area."
    },
    "primaryAction": { "type": "ButtonProps", "required": false },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be returned to the element that triggers the popover\nwhen it closes"
    },
    "secondaryAction": { "type": "ButtonProps", "required": false },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "absolute",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "trigger": {
      "type": "\"click\" | \"hover\"",
      "defaultValue": "click",
      "required": false,
      "description": "The interaction that triggers the popover.\n\n`hover` - means the popover will open when you hover with mouse or\nfocus with keyboard on the popover trigger\n\n`click` - means the popover will open on click or\npress `Enter` to `Space` on keyboard"
    }
  },
  "Tour": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "defaultIsActive": {
      "type": "boolean",
      "required": false,
      "description": "Activate the tour by default."
    },
    "initialStep": {
      "type": "number",
      "required": false,
      "description": "The initial step index."
    },
    "isActive": {
      "type": "boolean",
      "required": false,
      "description": "Make the tour controlled."
    },
    "onComplete": {
      "type": "() => void",
      "required": false,
      "description": "Called when the last step is completed."
    },
    "onDismiss": {
      "type": "(index: number) => void",
      "required": false,
      "description": "Called when the current step is closed or dismissed."
    }
  },
  "UseTourBeacon": {
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "defaultIsOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the tooltip will be initially shown"
    },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "defaultValue": "ltr",
      "required": false,
      "description": "Theme direction `ltr` or `rtl`. Popper's placement will\nbe set accordingly"
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "Custom `id` to use in place of `uuid`"
    },
    "isDisabled": { "type": "boolean", "required": false },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the tooltip will be shown (in controlled mode)"
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback to run when the tooltip hides"
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback to run when the tooltip shows"
    },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    }
  },
  "TourDialogOptions": {
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "arrowShadowColor": {
      "type": "string",
      "required": false,
      "description": "The `box-shadow` of the popover arrow"
    },
    "arrowSize": {
      "type": "number",
      "required": false,
      "description": "The size of the popover arrow"
    },
    "autoFocus": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be transferred to the first interactive element\nwhen the popover opens"
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "clippingParents",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier"
    },
    "children": {
      "type": "string | number | boolean | ReactElement<any, string | JSXElementConstructor<any>> | Iterable<ReactNode> | ReactPortal | PromiseLikeOfReactNode | ((props: { ...; }) => ReactNode)",
      "required": false,
      "description": "The content of the popover. It is usually the `PopoverTrigger`,\nand `PopoverContent`"
    },
    "closeDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "Delay in milliseconds before the popover closes after a trigger event.\nOnly works when `trigger=\"hover\"`"
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you blur out it by\nclicking outside or tabbing out"
    },
    "closeOnEsc": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popover will close when you hit the `Esc` key"
    },
    "computePositionOnMount": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be positioned when it mounts\n(even if it's not open)\n\nNote ðŸš¨: We don't recommend using this in a popover/menu intensive UI or page\nas it might affect scrolling performance."
    },
    "defaultIsOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be initially opened."
    },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "defaultValue": "ltr",
      "required": false,
      "description": "Theme direction `ltr` or `rtl`. Popper's placement will\nbe set accordingly"
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`\nand `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's\nabout to overflow its boundary area."
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "id": {
      "type": "string",
      "required": false,
      "description": "The html `id` attribute of the popover.\nIf not provided, we generate a unique id.\n\nThis `id` is also used to auto-generate the `aria-labelledby`\nand `aria-describedby` attributes that points to the `PopoverHeader` and `PopoverBody`"
    },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isLazy": {
      "type": "boolean",
      "required": false,
      "description": "Performance ðŸš€:\nIf `true`, the PopoverContent rendering will be deferred\nuntil the popover is open."
    },
    "isOpen": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, the popover will be opened in controlled mode."
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "unmount",
      "required": false,
      "description": "Performance ðŸš€:\nThe lazy behavior of popover's content when not visible.\nOnly works when `isLazy={true}`\n\n- \"unmount\": The popover's content is always unmounted when not open.\n- \"keepMounted\": The popover's content initially unmounted,\nbut stays mounted when popover is open."
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onClose": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover closes"
    },
    "onOpen": {
      "type": "() => void",
      "required": false,
      "description": "Callback fired when the popover opens"
    },
    "onSubmit": { "type": "() => Promise<any>", "required": false },
    "openDelay": {
      "type": "number",
      "defaultValue": "200",
      "required": false,
      "description": "Delay in milliseconds before the popover opens after a trigger event.\nOnly works when `trigger=\"hover\"`"
    },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure\nit's visible within the boundary area."
    },
    "primaryAction": { "type": "ButtonProps", "required": false },
    "returnFocusOnClose": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, focus will be returned to the element that triggers the popover\nwhen it closes"
    },
    "secondaryAction": { "type": "ButtonProps", "required": false },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "absolute",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "trigger": {
      "type": "\"click\" | \"hover\"",
      "defaultValue": "click",
      "required": false,
      "description": "The interaction that triggers the popover.\n\n`hover` - means the popover will open when you hover with mouse or\nfocus with keyboard on the popover trigger\n\n`click` - means the popover will open on click or\npress `Enter` to `Space` on keyboard"
    }
  },
  "TourSpotlightOptions": {
    "closeOnClick": { "type": "boolean", "required": false },
    "hideOverlay": { "type": "boolean", "required": false },
    "motionPreset": { "type": "\"fade\" | \"none\"", "required": false },
    "spacing": { "type": "number", "required": false }
  },
  "TourSpotlight": {
    "closeOnClick": { "type": "boolean", "required": false },
    "hideOverlay": { "type": "boolean", "required": false },
    "motionPreset": { "type": "\"fade\" | \"none\"", "required": false },
    "spacing": { "type": "number", "required": false }
  },
  "TourOptions": {
    "defaultIsActive": {
      "type": "boolean",
      "required": false,
      "description": "Activate the tour by default."
    },
    "initialStep": {
      "type": "number",
      "required": false,
      "description": "The initial step index."
    },
    "isActive": {
      "type": "boolean",
      "required": false,
      "description": "Make the tour controlled."
    },
    "onComplete": {
      "type": "() => void",
      "required": false,
      "description": "Called when the last step is completed."
    },
    "onDismiss": {
      "type": "(index: number) => void",
      "required": false,
      "description": "Called when the current step is closed or dismissed."
    }
  },
  "UseTour": {
    "steps": { "type": "TourStep[]", "required": true },
    "defaultIsActive": {
      "type": "boolean",
      "required": false,
      "description": "Activate the tour by default."
    },
    "initialStep": {
      "type": "number",
      "required": false,
      "description": "The initial step index."
    },
    "isActive": {
      "type": "boolean",
      "required": false,
      "description": "Make the tour controlled."
    },
    "onComplete": {
      "type": "() => void",
      "required": false,
      "description": "Called when the last step is completed."
    },
    "onDismiss": {
      "type": "(index: number) => void",
      "required": false,
      "description": "Called when the current step is closed or dismissed."
    }
  }
}
