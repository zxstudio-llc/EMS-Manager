{
  "FilterItem": {
    "id": {
      "type": "string",
      "required": true,
      "description": "The filter id"
    },
    "activeLabel": {
      "type": "string",
      "required": false,
      "description": "The active filter label\n\ne.g. \"Contact\""
    },
    "defaultOperator": {
      "type": "FilterOperatorId",
      "required": false,
      "description": "The default operator"
    },
    "icon": {
      "type": "ReactElement<any, string | JSXElementConstructor<any>>",
      "required": false,
      "description": "Icon displayed before the label"
    },
    "items": {
      "type": "FilterItems",
      "required": false,
      "description": "The available"
    },
    "label": {
      "type": "string",
      "required": false,
      "description": "The filter label\n\ne.g. \"Contact is lead\""
    },
    "multiple": {
      "type": "boolean",
      "required": false,
      "description": "Enable multiple select if true"
    },
    "operators": {
      "type": "FilterOperatorId[]",
      "required": false,
      "description": "The available operators"
    },
    "type": {
      "type": "FilterType",
      "required": false,
      "description": "The filter type"
    },
    "value": {
      "type": "string | number | boolean | string[] | Date",
      "required": false,
      "description": "The filter value"
    }
  },
  "FilterItems": {
    "length": {
      "type": "number",
      "required": true,
      "description": "Gets or sets the length of the array. This is a number one higher than the highest index in the array."
    },
    "toLocaleString": {
      "type": "(() => string) | (() => string)",
      "required": true,
      "description": "Returns a string representation of an array. The elements are converted to string using their toLocaleString methods.\n\n\nReturns a date converted to a string using the current locale."
    },
    "toString": {
      "type": "(() => string) | (() => string)",
      "required": true,
      "description": "Returns a string representation of an array.\n\n\nReturns a string representation of a function."
    }
  },
  "FilterMenu": {
    "items": { "type": "FilterItems", "required": true },
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "autoSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the first enabled menu item will receive focus and be selected\nwhen the menu opens."
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "clippingParents",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier"
    },
    "buttonProps": { "type": "ButtonProps", "required": false },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when you click outside\nthe menu list"
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when a menu item is\nclicked"
    },
    "command": { "type": "string", "required": false },
    "computePositionOnMount": { "type": "boolean", "required": false },
    "defaultIsOpen": { "type": "boolean", "required": false },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "required": false,
      "description": "If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\nbecome 'top-left' and vice-verse"
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`\nand `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's\nabout to overflow its boundary area."
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "icon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "id": { "type": "string", "required": false },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "inputDefaultValue": { "type": "string", "required": false },
    "inputValue": { "type": "string", "required": false },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Performance ðŸš€:\nIf `true`, the MenuItem rendering will be deferred\nuntil the menu is open."
    },
    "isOpen": { "type": "boolean", "required": false },
    "label": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "unmount",
      "required": false,
      "description": "Performance ðŸš€:\nThe lazy behavior of menu's content when not visible.\nOnly works when `isLazy={true}`\n\n- \"unmount\": The menu's content is always unmounted when not open.\n- \"keepMounted\": The menu's content initially unmounted,\nbut stays mounted when menu is open."
    },
    "listProps": { "type": "MenuListProps", "required": false },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "multiple": { "type": "boolean", "required": false },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onChange": {
      "type": "(value?: FilterValue | undefined) => void",
      "required": false
    },
    "onClose": { "type": "() => void", "required": false },
    "onInputChange": {
      "type": "(\n  value: string,\n  activeItemId?: string | undefined,\n) => void",
      "required": false
    },
    "onOpen": { "type": "() => void", "required": false },
    "onSelect": {
      "type": "(item: FilterItem | FilterItem[]) => Promise<void>",
      "required": false
    },
    "placeholder": { "type": "string", "required": false },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure\nit's visible within the boundary area."
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "absolute",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "value": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    }
  },
  "ActiveFilterContainer": {
    "isAttached": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the borderRadius of button that are direct children will be altered\nto look flushed together"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, all wrapped button will be disabled"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "defaultValue": "'0.5rem'",
      "required": false,
      "description": "The spacing between the buttons"
    }
  },
  "ActiveFilterLabel": {
    "icon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "iconSpacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false
    }
  },
  "ActiveFilterOperator": {
    "arrowPadding": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The padding required to prevent the arrow from\nreaching the very edge of the popper."
    },
    "autoSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the first enabled menu item will receive focus and be selected\nwhen the menu opens."
    },
    "boundary": {
      "type": "HTMLElement | \"clippingParents\" | \"scrollParent\"",
      "defaultValue": "clippingParents",
      "required": false,
      "description": "The boundary area for the popper. Used within the `preventOverflow` modifier"
    },
    "buttonProps": { "type": "MenuButtonProps", "required": false },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "closeOnBlur": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when you click outside\nthe menu list"
    },
    "closeOnSelect": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the menu will close when a menu item is\nclicked"
    },
    "computePositionOnMount": { "type": "boolean", "required": false },
    "defaultIsOpen": { "type": "boolean", "required": false },
    "defaultValue": {
      "type": "FilterOperatorId | (() => FilterOperatorId)",
      "required": false,
      "description": "The initial value to be used, in uncontrolled mode"
    },
    "direction": {
      "type": "\"ltr\" | \"rtl\"",
      "required": false,
      "description": "If `rtl`, proper placement positions will be flipped i.e. 'top-right' will\nbecome 'top-left' and vice-verse"
    },
    "eventListeners": {
      "type": "type ONLY_FOR_FORMAT =\n  | boolean\n  | { scroll?: boolean | undefined; resize?: boolean | undefined }",
      "defaultValue": true,
      "required": false,
      "description": "If provided, determines whether the popper will reposition itself on `scroll`\nand `resize` of the window."
    },
    "flip": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, the popper will change its placement and flip when it's\nabout to overflow its boundary area."
    },
    "gutter": {
      "type": "number",
      "defaultValue": "8",
      "required": false,
      "description": "The distance or margin between the reference and popper.\nIt is used internally to create an `offset` modifier.\n\nNB: If you define `offset` prop, it'll override the gutter."
    },
    "id": { "type": "string", "required": false },
    "initialFocusRef": {
      "type": "RefObject<{ focus(): void }>",
      "required": false,
      "description": "The `ref` of the element that should receive focus when the popover opens."
    },
    "isLazy": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "Performance ðŸš€:\nIf `true`, the MenuItem rendering will be deferred\nuntil the menu is open."
    },
    "isOpen": { "type": "boolean", "required": false },
    "items": { "type": "FilterItem[]", "required": false },
    "lazyBehavior": {
      "type": "LazyMode",
      "defaultValue": "unmount",
      "required": false,
      "description": "Performance ðŸš€:\nThe lazy behavior of menu's content when not visible.\nOnly works when `isLazy={true}`\n\n- \"unmount\": The menu's content is always unmounted when not open.\n- \"keepMounted\": The menu's content initially unmounted,\nbut stays mounted when menu is open."
    },
    "matchWidth": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the popper will match the width of the reference at all times.\nIt's useful for `autocomplete`, `date-picker` and `select` patterns."
    },
    "menuListProps": { "type": "MenuDialogListProps", "required": false },
    "modifiers": {
      "type": "Partial<Modifier<string, any>>[]",
      "required": false,
      "description": "Array of popper.js modifiers. Check the docs to see\nthe list of possible modifiers you can pass."
    },
    "offset": {
      "type": "[number, number]",
      "required": false,
      "description": "The main and cross-axis offset to displace popper element\nfrom its reference element."
    },
    "onChange": {
      "type": "(value: FilterOperatorId) => void",
      "required": false,
      "description": "The callback fired when the value changes"
    },
    "onClose": { "type": "() => void", "required": false },
    "onOpen": { "type": "() => void", "required": false },
    "placement": {
      "type": "PlacementWithLogical",
      "defaultValue": "bottom",
      "required": false,
      "description": "The placement of the popper relative to its reference."
    },
    "preventOverflow": {
      "type": "boolean",
      "defaultValue": true,
      "required": false,
      "description": "If `true`, will prevent the popper from being cut off and ensure\nit's visible within the boundary area."
    },
    "shouldUpdate": {
      "type": "(\n  prev: FilterOperatorId,\n  next: FilterOperatorId,\n) => boolean",
      "required": false,
      "description": "The function that determines if the state should be updated"
    },
    "strategy": {
      "type": "\"fixed\" | \"absolute\"",
      "defaultValue": "absolute",
      "required": false,
      "description": "The CSS positioning strategy to use."
    },
    "value": {
      "type": "FilterOperatorId",
      "required": false,
      "description": "The value to used in controlled mode"
    }
  },
  "ActiveFilterRemove": {},
  "ActiveFilter": {
    "id": { "type": "string", "required": true },
    "defaultOperator": { "type": "FilterOperatorId", "required": false },
    "defaultValue": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    },
    "formatLabel": {
      "type": "(label?: string | undefined) => string",
      "required": false
    },
    "formatValue": {
      "type": "(value: FilterValue) => string",
      "required": false
    },
    "icon": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "isAttached": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the borderRadius of button that are direct children will be altered\nto look flushed together"
    },
    "isDisabled": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, all wrapped button will be disabled"
    },
    "items": { "type": "FilterItems", "required": false },
    "label": { "type": "string", "required": false },
    "multiple": { "type": "boolean", "required": false },
    "onChange": { "type": "(filter: Filter) => void", "required": false },
    "onOperatorChange": {
      "type": "(id: FilterOperatorId) => void",
      "required": false
    },
    "onRemove": { "type": "() => void", "required": false },
    "onValueChange": {
      "type": "(value: FilterValue) => void",
      "required": false
    },
    "operator": { "type": "FilterOperatorId", "required": false },
    "operators": { "type": "FilterItem[]", "required": false },
    "renderValue": { "type": "FilterRenderFn", "required": false },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "defaultValue": "'0.5rem'",
      "required": false,
      "description": "The spacing between the buttons"
    },
    "type": { "type": "FilterType", "required": false },
    "value": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    }
  },
  "ActiveFilterValue": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "defaultValue": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    },
    "format": { "type": "(value: FilterValue) => string", "required": false },
    "items": { "type": "FilterItems", "required": false },
    "multiple": { "type": "boolean", "required": false },
    "onChange": { "type": "(value: FilterValue) => void", "required": false },
    "placeholder": { "type": "string", "required": false },
    "value": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    }
  },
  "ActiveFiltersList": {
    "align": {
      "type": "ResponsiveValue<AlignItems>",
      "required": false,
      "description": "The `align-items` value (for main axis alignment)"
    },
    "direction": {
      "type": "ResponsiveValue<FlexDirection>",
      "required": false,
      "description": "The `flex-direction` value"
    },
    "formatValue": {
      "type": "(value: FilterValue) => string",
      "required": false
    },
    "justify": {
      "type": "ResponsiveValue<JustifyContent>",
      "required": false,
      "description": "The `justify-content` value (for cross-axis alignment)"
    },
    "renderValue": { "type": "FilterRenderFn", "required": false },
    "shouldWrapChildren": {
      "type": "boolean",
      "defaultValue": false,
      "required": false,
      "description": "If `true`, the children will be wrapped in a `WrapItem`"
    },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The space between each child (even if it wraps)"
    },
    "spacingX": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The horizontal space between the each child (even if it wraps). Defaults to `spacing` if not defined."
    },
    "spacingY": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false,
      "description": "The vertical space between the each child (even if it wraps). Defaults to `spacing` if not defined."
    }
  },
  "ActiveFilterValueOptions": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "defaultValue": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    },
    "format": { "type": "(value: FilterValue) => string", "required": false },
    "items": { "type": "FilterItems", "required": false },
    "multiple": { "type": "boolean", "required": false },
    "onChange": { "type": "(value: FilterValue) => void", "required": false },
    "placeholder": { "type": "string", "required": false },
    "value": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    }
  },
  "Filter": {
    "contains": {
      "type": "(string: string, substring: string) => boolean",
      "required": true,
      "description": "Returns whether a string contains a given substring."
    },
    "endsWith": {
      "type": "(string: string, substring: string) => boolean",
      "required": true,
      "description": "Returns whether a string ends with a given substring."
    },
    "startsWith": {
      "type": "(string: string, substring: string) => boolean",
      "required": true,
      "description": "Returns whether a string starts with a given substring."
    }
  },
  "UseActiveFilter": {
    "id": { "type": "string", "required": true },
    "defaultOperator": { "type": "FilterOperatorId", "required": false },
    "defaultValue": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    },
    "onChange": { "type": "(filter: Filter) => void", "required": false },
    "onOperatorChange": {
      "type": "(operator: FilterOperatorId) => void",
      "required": false
    },
    "onValueChange": {
      "type": "(value: FilterValue) => void",
      "required": false
    },
    "operator": { "type": "FilterOperatorId", "required": false },
    "value": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    }
  },
  "UseFilterOperator": {
    "defaultValue": {
      "type": "FilterOperatorId | (() => FilterOperatorId)",
      "required": false,
      "description": "The initial value to be used, in uncontrolled mode"
    },
    "items": { "type": "FilterItem[]", "required": false },
    "onChange": {
      "type": "(value: FilterOperatorId) => void",
      "required": false,
      "description": "The callback fired when the value changes"
    },
    "shouldUpdate": {
      "type": "(\n  prev: FilterOperatorId,\n  next: FilterOperatorId,\n) => boolean",
      "required": false,
      "description": "The function that determines if the state should be updated"
    },
    "value": {
      "type": "FilterOperatorId",
      "required": false,
      "description": "The value to used in controlled mode"
    }
  },
  "UseFilterValue": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "defaultValue": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    },
    "format": { "type": "(value: FilterValue) => string", "required": false },
    "items": { "type": "FilterItems", "required": false },
    "multiple": { "type": "boolean", "required": false },
    "onChange": { "type": "(value: FilterValue) => void", "required": false },
    "placeholder": { "type": "string", "required": false },
    "value": {
      "type": "string | number | boolean | string[] | Date",
      "required": false
    }
  },
  "FiltersProvider": {
    "activeFilters": { "type": "Filter[]", "required": false },
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "defaultFilters": { "type": "Filter[]", "required": false },
    "filters": { "type": "FilterItem[]", "required": false },
    "onBeforeEnableFilter": {
      "type": "(\n  filter: Filter,\n  filterItem?: FilterItem | undefined,\n) => Promise<Filter>",
      "required": false
    },
    "onChange": {
      "type": "(activeFilters: Filter[]) => void",
      "required": false
    },
    "operators": {
      "type": "FilterOperators<Operator, Type>",
      "required": false
    }
  },
  "NoFilteredResults": {
    "children": {
      "type": "type ONLY_FOR_FORMAT =\n  | string\n  | number\n  | boolean\n  | ReactElement<any, string | JSXElementConstructor<any>>\n  | Iterable<ReactNode>\n  | ReactPortal\n  | PromiseLikeOfReactNode",
      "required": false
    },
    "clearLabel": { "type": "string", "required": false },
    "onReset": { "type": "() => void", "required": false },
    "resource": { "type": "string", "required": false },
    "spacing": {
      "type": "ResponsiveValue<number | \"px\" | (string & {}) | \"-moz-initial\" | \"inherit\" | \"initial\" | \"revert\" | \"revert-layer\" | \"unset\" | \"auto\" | \"1\" | \"-1\" | \"2\" | \"-2\" | \"3\" | \"-3\" | \"4\" | \"-4\" | \"5\" | \"-5\" | ... 54 more ... | \"-3.5\">",
      "required": false
    },
    "title": { "type": "string", "required": false }
  },
  "FilterOperatorId": {
    "__@iterator@370689": {
      "type": "() => IterableIterator<string>",
      "required": true,
      "description": "Iterator"
    },
    "anchor": {
      "type": "(name: string) => string",
      "required": true,
      "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value"
    },
    "at": {
      "type": "(index: number) => string | undefined",
      "required": true,
      "description": "Returns a new String consisting of the single UTF-16 code unit located at the specified index."
    },
    "big": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<big>` HTML element"
    },
    "blink": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<blink>` HTML element"
    },
    "bold": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<b>` HTML element"
    },
    "charAt": {
      "type": "(pos: number) => string",
      "required": true,
      "description": "Returns the character at the specified index."
    },
    "charCodeAt": {
      "type": "(index: number) => number",
      "required": true,
      "description": "Returns the Unicode value of the character at the specified location."
    },
    "codePointAt": {
      "type": "(pos: number) => number | undefined",
      "required": true,
      "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos."
    },
    "concat": {
      "type": "(...strings: string[]) => string",
      "required": true,
      "description": "Returns a string that contains the concatenation of two or more strings."
    },
    "endsWith": {
      "type": "(\n  searchString: string,\n  endPosition?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition â€“ length(this). Otherwise returns false."
    },
    "fixed": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<tt>` HTML element"
    },
    "fontcolor": {
      "type": "(color: string) => string",
      "required": true,
      "description": "Returns a `<font>` HTML element and sets the color attribute value"
    },
    "fontsize": {
      "type": "{ (size: number): string; (size: string): string }",
      "required": true,
      "description": "Returns a `<font>` HTML element and sets the size attribute value"
    },
    "includes": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false."
    },
    "indexOf": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the position of the first occurrence of a substring."
    },
    "italics": {
      "type": "() => string",
      "required": true,
      "description": "Returns an `<i>` HTML element"
    },
    "lastIndexOf": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the last occurrence of a substring in the string."
    },
    "length": {
      "type": "number",
      "required": true,
      "description": "Returns the length of a String object."
    },
    "link": {
      "type": "(url: string) => string",
      "required": true,
      "description": "Returns an `<a>` HTML element and sets the href attribute value"
    },
    "localeCompare": {
      "type": "{\n  (that: string): number\n  (\n    that: string,\n    locales?: string | string[] | undefined,\n    options?: CollatorOptions | undefined,\n  ): number\n}",
      "required": true,
      "description": "Determines whether two strings are equivalent in the current locale.\n\n\nDetermines whether two strings are equivalent in the current or specified locale."
    },
    "match": {
      "type": "{\n  (regexp: string | RegExp): RegExpMatchArray | null\n  (matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null\n  }): RegExpMatchArray | null\n}",
      "required": true,
      "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\n\n\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found."
    },
    "matchAll": {
      "type": "(regexp: RegExp) => IterableIterator<RegExpMatchArray>",
      "required": true,
      "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search."
    },
    "normalize": {
      "type": "{\n  (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string\n  (form?: string | undefined): string\n}",
      "required": true,
      "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms."
    },
    "padEnd": {
      "type": "(\n  maxLength: number,\n  fillString?: string | undefined,\n) => string",
      "required": true,
      "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string."
    },
    "padStart": {
      "type": "(\n  maxLength: number,\n  fillString?: string | undefined,\n) => string",
      "required": true,
      "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string."
    },
    "repeat": {
      "type": "(count: number) => string",
      "required": true,
      "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned."
    },
    "replace": {
      "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
      "required": true,
      "description": "Replaces text in a string, using a regular expression or search string.\n\n\nPasses a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.\n\n\nReplaces text in a string, using an object that supports replacement within a string."
    },
    "replaceAll": {
      "type": "{\n  (searchValue: string | RegExp, replaceValue: string): string\n  (\n    searchValue: string | RegExp,\n    replacer: (substring: string, ...args: any[]) => string,\n  ): string\n}",
      "required": true,
      "description": "Replace all instances of a substring in a string, using a regular expression or search string."
    },
    "search": {
      "type": "{\n  (regexp: string | RegExp): number\n  (searcher: { [Symbol.search](string: string): number }): number\n}",
      "required": true,
      "description": "Finds the first substring match in a regular expression search."
    },
    "slice": {
      "type": "(\n  start?: number | undefined,\n  end?: number | undefined,\n) => string",
      "required": true,
      "description": "Returns a section of a string."
    },
    "small": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<small>` HTML element"
    },
    "split": {
      "type": "{\n  (separator: string | RegExp, limit?: number | undefined): string[]\n  (\n    splitter: {\n      [Symbol.split](string: string, limit?: number | undefined): string[]\n    },\n    limit?: number | undefined,\n  ): string[]\n}",
      "required": true,
      "description": "Split a string into substrings using the specified separator and return them as an array."
    },
    "startsWith": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false."
    },
    "strike": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<strike>` HTML element"
    },
    "sub": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<sub>` HTML element"
    },
    "substr": {
      "type": "(from: number, length?: number | undefined) => string",
      "required": true,
      "description": "Gets a substring beginning at the specified location and having the specified length."
    },
    "substring": {
      "type": "(start: number, end?: number | undefined) => string",
      "required": true,
      "description": "Returns the substring at the specified location within a String object."
    },
    "sup": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<sup>` HTML element"
    },
    "toLocaleLowerCase": {
      "type": "(locales?: string | string[] | undefined) => string",
      "required": true,
      "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale."
    },
    "toLocaleUpperCase": {
      "type": "(locales?: string | string[] | undefined) => string",
      "required": true,
      "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale."
    },
    "toLowerCase": {
      "type": "() => string",
      "required": true,
      "description": "Converts all the alphabetic characters in a string to lowercase."
    },
    "toString": {
      "type": "() => string",
      "required": true,
      "description": "Returns a string representation of a string."
    },
    "toUpperCase": {
      "type": "() => string",
      "required": true,
      "description": "Converts all the alphabetic characters in a string to uppercase."
    },
    "trim": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading and trailing white space and line terminator characters from a string."
    },
    "trimEnd": {
      "type": "() => string",
      "required": true,
      "description": "Removes the trailing white space and line terminator characters from a string."
    },
    "trimLeft": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading white space and line terminator characters from a string."
    },
    "trimRight": {
      "type": "() => string",
      "required": true,
      "description": "Removes the trailing white space and line terminator characters from a string."
    },
    "trimStart": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading white space and line terminator characters from a string."
    },
    "valueOf": {
      "type": "() => string",
      "required": true,
      "description": "Returns the primitive value of the specified object."
    }
  },
  "FilterType": {
    "__@iterator@370689": {
      "type": "() => IterableIterator<string>",
      "required": true,
      "description": "Iterator"
    },
    "anchor": {
      "type": "(name: string) => string",
      "required": true,
      "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value"
    },
    "at": {
      "type": "(index: number) => string | undefined",
      "required": true,
      "description": "Returns a new String consisting of the single UTF-16 code unit located at the specified index."
    },
    "big": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<big>` HTML element"
    },
    "blink": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<blink>` HTML element"
    },
    "bold": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<b>` HTML element"
    },
    "charAt": {
      "type": "(pos: number) => string",
      "required": true,
      "description": "Returns the character at the specified index."
    },
    "charCodeAt": {
      "type": "(index: number) => number",
      "required": true,
      "description": "Returns the Unicode value of the character at the specified location."
    },
    "codePointAt": {
      "type": "(pos: number) => number | undefined",
      "required": true,
      "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos."
    },
    "concat": {
      "type": "(...strings: string[]) => string",
      "required": true,
      "description": "Returns a string that contains the concatenation of two or more strings."
    },
    "endsWith": {
      "type": "(\n  searchString: string,\n  endPosition?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition â€“ length(this). Otherwise returns false."
    },
    "fixed": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<tt>` HTML element"
    },
    "fontcolor": {
      "type": "(color: string) => string",
      "required": true,
      "description": "Returns a `<font>` HTML element and sets the color attribute value"
    },
    "fontsize": {
      "type": "{ (size: number): string; (size: string): string }",
      "required": true,
      "description": "Returns a `<font>` HTML element and sets the size attribute value"
    },
    "includes": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false."
    },
    "indexOf": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the position of the first occurrence of a substring."
    },
    "italics": {
      "type": "() => string",
      "required": true,
      "description": "Returns an `<i>` HTML element"
    },
    "lastIndexOf": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the last occurrence of a substring in the string."
    },
    "length": {
      "type": "number",
      "required": true,
      "description": "Returns the length of a String object."
    },
    "link": {
      "type": "(url: string) => string",
      "required": true,
      "description": "Returns an `<a>` HTML element and sets the href attribute value"
    },
    "localeCompare": {
      "type": "{\n  (that: string): number\n  (\n    that: string,\n    locales?: string | string[] | undefined,\n    options?: CollatorOptions | undefined,\n  ): number\n}",
      "required": true,
      "description": "Determines whether two strings are equivalent in the current locale.\n\n\nDetermines whether two strings are equivalent in the current or specified locale."
    },
    "match": {
      "type": "{\n  (regexp: string | RegExp): RegExpMatchArray | null\n  (matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null\n  }): RegExpMatchArray | null\n}",
      "required": true,
      "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\n\n\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found."
    },
    "matchAll": {
      "type": "(regexp: RegExp) => IterableIterator<RegExpMatchArray>",
      "required": true,
      "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search."
    },
    "normalize": {
      "type": "{\n  (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string\n  (form?: string | undefined): string\n}",
      "required": true,
      "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms."
    },
    "padEnd": {
      "type": "(\n  maxLength: number,\n  fillString?: string | undefined,\n) => string",
      "required": true,
      "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string."
    },
    "padStart": {
      "type": "(\n  maxLength: number,\n  fillString?: string | undefined,\n) => string",
      "required": true,
      "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string."
    },
    "repeat": {
      "type": "(count: number) => string",
      "required": true,
      "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned."
    },
    "replace": {
      "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
      "required": true,
      "description": "Replaces text in a string, using a regular expression or search string.\n\n\nPasses a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.\n\n\nReplaces text in a string, using an object that supports replacement within a string."
    },
    "replaceAll": {
      "type": "{\n  (searchValue: string | RegExp, replaceValue: string): string\n  (\n    searchValue: string | RegExp,\n    replacer: (substring: string, ...args: any[]) => string,\n  ): string\n}",
      "required": true,
      "description": "Replace all instances of a substring in a string, using a regular expression or search string."
    },
    "search": {
      "type": "{\n  (regexp: string | RegExp): number\n  (searcher: { [Symbol.search](string: string): number }): number\n}",
      "required": true,
      "description": "Finds the first substring match in a regular expression search."
    },
    "slice": {
      "type": "(\n  start?: number | undefined,\n  end?: number | undefined,\n) => string",
      "required": true,
      "description": "Returns a section of a string."
    },
    "small": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<small>` HTML element"
    },
    "split": {
      "type": "{\n  (separator: string | RegExp, limit?: number | undefined): string[]\n  (\n    splitter: {\n      [Symbol.split](string: string, limit?: number | undefined): string[]\n    },\n    limit?: number | undefined,\n  ): string[]\n}",
      "required": true,
      "description": "Split a string into substrings using the specified separator and return them as an array."
    },
    "startsWith": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false."
    },
    "strike": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<strike>` HTML element"
    },
    "sub": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<sub>` HTML element"
    },
    "substr": {
      "type": "(from: number, length?: number | undefined) => string",
      "required": true,
      "description": "Gets a substring beginning at the specified location and having the specified length."
    },
    "substring": {
      "type": "(start: number, end?: number | undefined) => string",
      "required": true,
      "description": "Returns the substring at the specified location within a String object."
    },
    "sup": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<sup>` HTML element"
    },
    "toLocaleLowerCase": {
      "type": "(locales?: string | string[] | undefined) => string",
      "required": true,
      "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale."
    },
    "toLocaleUpperCase": {
      "type": "(locales?: string | string[] | undefined) => string",
      "required": true,
      "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale."
    },
    "toLowerCase": {
      "type": "() => string",
      "required": true,
      "description": "Converts all the alphabetic characters in a string to lowercase."
    },
    "toString": {
      "type": "() => string",
      "required": true,
      "description": "Returns a string representation of a string."
    },
    "toUpperCase": {
      "type": "() => string",
      "required": true,
      "description": "Converts all the alphabetic characters in a string to uppercase."
    },
    "trim": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading and trailing white space and line terminator characters from a string."
    },
    "trimEnd": {
      "type": "() => string",
      "required": true,
      "description": "Removes the trailing white space and line terminator characters from a string."
    },
    "trimLeft": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading white space and line terminator characters from a string."
    },
    "trimRight": {
      "type": "() => string",
      "required": true,
      "description": "Removes the trailing white space and line terminator characters from a string."
    },
    "trimStart": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading white space and line terminator characters from a string."
    },
    "valueOf": {
      "type": "() => string",
      "required": true,
      "description": "Returns the primitive value of the specified object."
    }
  },
  "FilterOperator": {
    "__@iterator@370689": {
      "type": "() => IterableIterator<string>",
      "required": true,
      "description": "Iterator"
    },
    "anchor": {
      "type": "(name: string) => string",
      "required": true,
      "description": "Returns an `<a>` HTML anchor element and sets the name attribute to the text value"
    },
    "at": {
      "type": "(index: number) => string | undefined",
      "required": true,
      "description": "Returns a new String consisting of the single UTF-16 code unit located at the specified index."
    },
    "big": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<big>` HTML element"
    },
    "blink": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<blink>` HTML element"
    },
    "bold": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<b>` HTML element"
    },
    "charAt": {
      "type": "(pos: number) => string",
      "required": true,
      "description": "Returns the character at the specified index."
    },
    "charCodeAt": {
      "type": "(index: number) => number",
      "required": true,
      "description": "Returns the Unicode value of the character at the specified location."
    },
    "codePointAt": {
      "type": "(pos: number) => number | undefined",
      "required": true,
      "description": "Returns a nonnegative integer Number less than 1114112 (0x110000) that is the code point\nvalue of the UTF-16 encoded code point starting at the string element at position pos in\nthe String resulting from converting this object to a String.\nIf there is no element at that position, the result is undefined.\nIf a valid UTF-16 surrogate pair does not begin at pos, the result is the code unit at pos."
    },
    "concat": {
      "type": "(...strings: string[]) => string",
      "required": true,
      "description": "Returns a string that contains the concatenation of two or more strings."
    },
    "endsWith": {
      "type": "(\n  searchString: string,\n  endPosition?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nendPosition â€“ length(this). Otherwise returns false."
    },
    "fixed": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<tt>` HTML element"
    },
    "fontcolor": {
      "type": "(color: string) => string",
      "required": true,
      "description": "Returns a `<font>` HTML element and sets the color attribute value"
    },
    "fontsize": {
      "type": "{ (size: number): string; (size: string): string }",
      "required": true,
      "description": "Returns a `<font>` HTML element and sets the size attribute value"
    },
    "includes": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if searchString appears as a substring of the result of converting this\nobject to a String, at one or more positions that are\ngreater than or equal to position; otherwise, returns false."
    },
    "indexOf": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the position of the first occurrence of a substring."
    },
    "italics": {
      "type": "() => string",
      "required": true,
      "description": "Returns an `<i>` HTML element"
    },
    "lastIndexOf": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => number",
      "required": true,
      "description": "Returns the last occurrence of a substring in the string."
    },
    "length": {
      "type": "number",
      "required": true,
      "description": "Returns the length of a String object."
    },
    "link": {
      "type": "(url: string) => string",
      "required": true,
      "description": "Returns an `<a>` HTML element and sets the href attribute value"
    },
    "localeCompare": {
      "type": "{\n  (that: string): number\n  (\n    that: string,\n    locales?: string | string[] | undefined,\n    options?: CollatorOptions | undefined,\n  ): number\n}",
      "required": true,
      "description": "Determines whether two strings are equivalent in the current locale.\n\n\nDetermines whether two strings are equivalent in the current or specified locale."
    },
    "match": {
      "type": "{\n  (regexp: string | RegExp): RegExpMatchArray | null\n  (matcher: {\n    [Symbol.match](string: string): RegExpMatchArray | null\n  }): RegExpMatchArray | null\n}",
      "required": true,
      "description": "Matches a string with a regular expression, and returns an array containing the results of that search.\n\n\nMatches a string or an object that supports being matched against, and returns an array\ncontaining the results of that search, or null if no matches are found."
    },
    "matchAll": {
      "type": "(regexp: RegExp) => IterableIterator<RegExpMatchArray>",
      "required": true,
      "description": "Matches a string with a regular expression, and returns an iterable of matches\ncontaining the results of that search."
    },
    "normalize": {
      "type": "{\n  (form: \"NFC\" | \"NFD\" | \"NFKC\" | \"NFKD\"): string\n  (form?: string | undefined): string\n}",
      "required": true,
      "description": "Returns the String value result of normalizing the string into the normalization form\nnamed by form as specified in Unicode Standard Annex #15, Unicode Normalization Forms."
    },
    "padEnd": {
      "type": "(\n  maxLength: number,\n  fillString?: string | undefined,\n) => string",
      "required": true,
      "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the end (right) of the current string."
    },
    "padStart": {
      "type": "(\n  maxLength: number,\n  fillString?: string | undefined,\n) => string",
      "required": true,
      "description": "Pads the current string with a given string (possibly repeated) so that the resulting string reaches a given length.\nThe padding is applied from the start (left) of the current string."
    },
    "repeat": {
      "type": "(count: number) => string",
      "required": true,
      "description": "Returns a String value that is made from count copies appended together. If count is 0,\nthe empty string is returned."
    },
    "replace": {
      "type": "{ (searchValue: string | RegExp, replaceValue: string): string; (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string; (searchValue: { ...; }, replaceValue: string): string; (searchValue: { ...; }, replacer: (substring: string, ...args: any[]) => string): string; }",
      "required": true,
      "description": "Replaces text in a string, using a regular expression or search string.\n\n\nPasses a string and \n{@linkcode \nreplaceValue\n}\n to the `[Symbol.replace]` method on \n{@linkcode \nsearchValue\n}\n. This method is expected to implement its own replacement algorithm.\n\n\nReplaces text in a string, using an object that supports replacement within a string."
    },
    "replaceAll": {
      "type": "{\n  (searchValue: string | RegExp, replaceValue: string): string\n  (\n    searchValue: string | RegExp,\n    replacer: (substring: string, ...args: any[]) => string,\n  ): string\n}",
      "required": true,
      "description": "Replace all instances of a substring in a string, using a regular expression or search string."
    },
    "search": {
      "type": "{\n  (regexp: string | RegExp): number\n  (searcher: { [Symbol.search](string: string): number }): number\n}",
      "required": true,
      "description": "Finds the first substring match in a regular expression search."
    },
    "slice": {
      "type": "(\n  start?: number | undefined,\n  end?: number | undefined,\n) => string",
      "required": true,
      "description": "Returns a section of a string."
    },
    "small": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<small>` HTML element"
    },
    "split": {
      "type": "{\n  (separator: string | RegExp, limit?: number | undefined): string[]\n  (\n    splitter: {\n      [Symbol.split](string: string, limit?: number | undefined): string[]\n    },\n    limit?: number | undefined,\n  ): string[]\n}",
      "required": true,
      "description": "Split a string into substrings using the specified separator and return them as an array."
    },
    "startsWith": {
      "type": "(\n  searchString: string,\n  position?: number | undefined,\n) => boolean",
      "required": true,
      "description": "Returns true if the sequence of elements of searchString converted to a String is the\nsame as the corresponding elements of this object (converted to a String) starting at\nposition. Otherwise returns false."
    },
    "strike": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<strike>` HTML element"
    },
    "sub": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<sub>` HTML element"
    },
    "substr": {
      "type": "(from: number, length?: number | undefined) => string",
      "required": true,
      "description": "Gets a substring beginning at the specified location and having the specified length."
    },
    "substring": {
      "type": "(start: number, end?: number | undefined) => string",
      "required": true,
      "description": "Returns the substring at the specified location within a String object."
    },
    "sup": {
      "type": "() => string",
      "required": true,
      "description": "Returns a `<sup>` HTML element"
    },
    "toLocaleLowerCase": {
      "type": "(locales?: string | string[] | undefined) => string",
      "required": true,
      "description": "Converts all alphabetic characters to lowercase, taking into account the host environment's current locale."
    },
    "toLocaleUpperCase": {
      "type": "(locales?: string | string[] | undefined) => string",
      "required": true,
      "description": "Returns a string where all alphabetic characters have been converted to uppercase, taking into account the host environment's current locale."
    },
    "toLowerCase": {
      "type": "() => string",
      "required": true,
      "description": "Converts all the alphabetic characters in a string to lowercase."
    },
    "toString": {
      "type": "() => string",
      "required": true,
      "description": "Returns a string representation of a string."
    },
    "toUpperCase": {
      "type": "() => string",
      "required": true,
      "description": "Converts all the alphabetic characters in a string to uppercase."
    },
    "trim": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading and trailing white space and line terminator characters from a string."
    },
    "trimEnd": {
      "type": "() => string",
      "required": true,
      "description": "Removes the trailing white space and line terminator characters from a string."
    },
    "trimLeft": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading white space and line terminator characters from a string."
    },
    "trimRight": {
      "type": "() => string",
      "required": true,
      "description": "Removes the trailing white space and line terminator characters from a string."
    },
    "trimStart": {
      "type": "() => string",
      "required": true,
      "description": "Removes the leading white space and line terminator characters from a string."
    },
    "valueOf": {
      "type": "() => string",
      "required": true,
      "description": "Returns the primitive value of the specified object."
    }
  }
}
