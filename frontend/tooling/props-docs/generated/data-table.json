{
  "DataTable": {
    "columns": {
      "type": "ColumnDef<Data, any>[]",
      "required": true,
      "description": "The array of column defs to use for the table."
    },
    "data": {
      "type": "Data[]",
      "required": true,
      "description": "The data for the table to display. This array should match the type you provided to `table.setRowType<...>`. Columns can access this data via string/index or a functional accessor. When the `data` option changes reference, the table will reprocess the data."
    },
    "aggregationFns": {
      "type": "Record<string, AggregationFn<any>>",
      "required": false
    },
    "autoResetAll": {
      "type": "boolean",
      "required": false,
      "description": "Set this option to override any of the `autoReset...` feature options."
    },
    "autoResetExpanded": {
      "type": "boolean",
      "required": false,
      "description": "Enable this setting to automatically reset the expanded state of the table when expanding state changes."
    },
    "autoResetPageIndex": {
      "type": "boolean",
      "required": false,
      "description": "If set to `true`, pagination will be reset to the first page when page-altering state changes eg. `data` is updated, filters change, grouping changes, etc."
    },
    "className": {
      "type": "string",
      "required": false,
      "description": "The table class name attribute"
    },
    "columnResizeDirection": {
      "type": "ColumnResizeDirection",
      "required": false,
      "description": "Enables or disables right-to-left support for resizing the column. defaults to 'ltr'."
    },
    "columnResizeMode": {
      "type": "ColumnResizeMode",
      "required": false,
      "description": "Determines when the columnSizing state is updated. `onChange` updates the state when the user is dragging the resize handle. `onEnd` updates the state when the user releases the resize handle."
    },
    "debugAll": {
      "type": "boolean",
      "required": false,
      "description": "Set this option to `true` to output all debugging information to the console."
    },
    "debugCells": {
      "type": "boolean",
      "required": false,
      "description": "Set this option to `true` to output cell debugging information to the console."
    },
    "debugColumns": {
      "type": "boolean",
      "required": false,
      "description": "Set this option to `true` to output column debugging information to the console."
    },
    "debugHeaders": {
      "type": "boolean",
      "required": false,
      "description": "Set this option to `true` to output header debugging information to the console."
    },
    "debugRows": {
      "type": "boolean",
      "required": false,
      "description": "Set this option to `true` to output row debugging information to the console."
    },
    "debugTable": {
      "type": "boolean",
      "required": false,
      "description": "Set this option to `true` to output table debugging information to the console."
    },
    "defaultColumn": {
      "type": "Partial<ColumnDef<Data, unknown>>",
      "required": false,
      "description": "Default column options to use for all column defs supplied to the table."
    },
    "enableColumnFilters": {
      "type": "boolean",
      "required": false,
      "description": "Enables/disables **column** filtering for all columns."
    },
    "enableColumnPinning": {
      "type": "boolean",
      "required": false,
      "description": "Enables/disables column pinning for the table. Defaults to `true`."
    },
    "enableColumnResizing": {
      "type": "boolean",
      "required": false,
      "description": "Enables or disables column resizing for the column."
    },
    "enableExpanding": {
      "type": "boolean",
      "required": false,
      "description": "Enable/disable expanding for all rows."
    },
    "enableFilters": {
      "type": "boolean",
      "required": false,
      "description": "Enables/disables all filtering for the table."
    },
    "enableGlobalFilter": {
      "type": "boolean",
      "required": false,
      "description": "Enables/disables **global** filtering for all columns."
    },
    "enableGrouping": {
      "type": "boolean",
      "required": false,
      "description": "Enables/disables grouping for the table."
    },
    "enableHiding": { "type": "boolean", "required": false },
    "enableMultiRemove": {
      "type": "boolean",
      "required": false,
      "description": "Enables/disables the ability to remove multi-sorts"
    },
    "enableMultiRowSelection": {
      "type": "boolean | ((row: Row<Data>) => boolean)",
      "required": false,
      "description": "- Enables/disables multiple row selection for all rows in the table OR\n- A function that given a row, returns whether to enable/disable multiple row selection for that row's children/grandchildren"
    },
    "enableMultiSort": {
      "type": "boolean",
      "required": false,
      "description": "Enables/Disables multi-sorting for the table."
    },
    "enablePinning": {
      "type": "boolean",
      "required": false,
      "description": "Enables/disables all pinning for the table. Defaults to `true`."
    },
    "enableRowPinning": {
      "type": "boolean | ((row: Row<Data>) => boolean)",
      "required": false,
      "description": "Enables/disables row pinning for the table. Defaults to `true`."
    },
    "enableRowSelection": {
      "type": "boolean | ((row: Row<Data>) => boolean)",
      "required": false,
      "description": "- Enables/disables row selection for all rows in the table OR\n- A function that given a row, returns whether to enable/disable row selection for that row"
    },
    "enableSorting": {
      "type": "boolean",
      "required": false,
      "description": "Enables/Disables sorting for the table."
    },
    "enableSortingRemoval": {
      "type": "boolean",
      "required": false,
      "description": "Enables/Disables the ability to remove sorting for the table.\n- If `true` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'none' -> ...\n- If `false` then changing sort order will circle like: 'none' -> 'desc' -> 'asc' -> 'desc' -> 'asc' -> ..."
    },
    "enableSubRowSelection": {
      "type": "boolean | ((row: Row<Data>) => boolean)",
      "required": false,
      "description": "Enables/disables automatic sub-row selection when a parent row is selected, or a function that enables/disables automatic sub-row selection for each row.\n(Use in combination with expanding or grouping features)"
    },
    "filterFns": { "type": "Record<string, FilterFn<any>>", "required": false },
    "filterFromLeafRows": {
      "type": "boolean",
      "required": false,
      "description": "By default, filtering is done from parent rows down (so if a parent row is filtered out, all of its children will be filtered out as well). Setting this option to `true` will cause filtering to be done from leaf rows up (which means parent rows will be included so long as one of their child or grand-child rows is also included)."
    },
    "getColumnCanGlobalFilter": {
      "type": "(column: Column<Data, unknown>) => boolean",
      "required": false,
      "description": "If provided, this function will be called with the column and should return `true` or `false` to indicate whether this column should be used for global filtering.\n\nThis is useful if the column can contain data that is not `string` or `number` (i.e. `undefined`)."
    },
    "getExpandedRowModel": {
      "type": "(table: Table<any>) => () => RowModel<any>",
      "required": false,
      "description": "This function is responsible for returning the expanded row model. If this function is not provided, the table will not expand rows. You can use the default exported `getExpandedRowModel` function to get the expanded row model or implement your own."
    },
    "getFacetedMinMaxValues": {
      "type": "(\n  table: Table<Data>,\n  columnId: string,\n) => () => [number, number] | undefined",
      "required": false
    },
    "getFacetedRowModel": {
      "type": "(\n  table: Table<Data>,\n  columnId: string,\n) => () => RowModel<Data>",
      "required": false
    },
    "getFacetedUniqueValues": {
      "type": "(\n  table: Table<Data>,\n  columnId: string,\n) => () => Map<any, number>",
      "required": false
    },
    "getFilteredRowModel": {
      "type": "(table: Table<any>) => () => RowModel<any>",
      "required": false,
      "description": "If provided, this function is called **once** per table and should return a **new function** which will calculate and return the row model for the table when it's filtered.\n- For server-side filtering, this function is unnecessary and can be ignored since the server should already return the filtered row model.\n- For client-side filtering, this function is required. A default implementation is provided via any table adapter's `{ getFilteredRowModel }` export."
    },
    "getGroupedRowModel": {
      "type": "(table: Table<any>) => () => RowModel<any>",
      "required": false,
      "description": "Returns the row model after grouping has taken place, but no further."
    },
    "getIsRowExpanded": {
      "type": "(row: Row<Data>) => boolean",
      "required": false,
      "description": "If provided, allows you to override the default behavior of determining whether a row is currently expanded."
    },
    "getPaginationRowModel": {
      "type": "(table: Table<any>) => () => RowModel<any>",
      "required": false,
      "description": "Returns the row model after pagination has taken place, but no further.\n\nPagination columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here."
    },
    "getRowCanExpand": {
      "type": "(row: Row<Data>) => boolean",
      "required": false,
      "description": "If provided, allows you to override the default behavior of determining whether a row can be expanded."
    },
    "getRowId": {
      "type": "(\n  originalRow: Data,\n  index: number,\n  parent?: Row<Data> | undefined,\n) => string",
      "required": false,
      "description": "This optional function is used to derive a unique ID for any given row. If not provided the rows index is used (nested rows join together with `.` using their grandparents' index eg. `index.index.index`). If you need to identify individual rows that are originating from any server-side operations, it's suggested you use this function to return an ID that makes sense regardless of network IO/ambiguity eg. a userId, taskId, database ID field, etc."
    },
    "getSortedRowModel": {
      "type": "(table: Table<any>) => () => RowModel<any>",
      "required": false,
      "description": "This function is used to retrieve the sorted row model. If using server-side sorting, this function is not required. To use client-side sorting, pass the exported `getSortedRowModel()` from your adapter to your table or implement your own."
    },
    "getSubRows": {
      "type": "(originalRow: Data, index: number) => Data[] | undefined",
      "required": false,
      "description": "This optional function is used to access the sub rows for any given row. If you are using nested rows, you will need to use this function to return the sub rows object (or undefined) from the row."
    },
    "globalFilterFn": {
      "type": "FilterFnOption<Data>",
      "required": false,
      "description": "The filter function to use for global filtering.\n- A `string` referencing a built-in filter function\n- A `string` that references a custom filter functions provided via the `tableOptions.filterFns` option\n- A custom filter function"
    },
    "groupedColumnMode": {
      "type": "false | \"reorder\" | \"remove\"",
      "required": false,
      "description": "Grouping columns are automatically reordered by default to the start of the columns list. If you would rather remove them or leave them as-is, set the appropriate mode here."
    },
    "initialState": {
      "type": "InitialTableState",
      "required": false,
      "description": "Use this option to optionally pass initial state to the table. This state will be used when resetting various table states either automatically by the table (eg. `options.autoResetPageIndex`) or via functions like `table.resetRowSelection()`. Most reset function allow you optionally pass a flag to reset to a blank/default state instead of the initial state.\n\nTable state will not be reset when this object changes, which also means that the initial state object does not need to be stable."
    },
    "instanceRef": {
      "type": "type ONLY_FOR_FORMAT =\n  | ((instance: Table<Data> | null) => void)\n  | RefObject<Table<Data>>",
      "required": false,
      "description": "The TableInstance reference"
    },
    "isMultiSortEvent": {
      "type": "(e: unknown) => boolean",
      "required": false,
      "description": "Pass a custom function that will be used to determine if a multi-sort event should be triggered. It is passed the event from the sort toggle handler and should return `true` if the event should trigger a multi-sort."
    },
    "isSelectable": {
      "type": "boolean",
      "required": false,
      "description": "Enable row selection"
    },
    "isSortable": {
      "type": "boolean",
      "required": false,
      "description": "Enable sorting on all columns"
    },
    "keepPinnedRows": {
      "type": "boolean",
      "required": false,
      "description": "When `false`, pinned rows will not be visible if they are filtered or paginated out of the table. When `true`, pinned rows will always be visible regardless of filtering or pagination. Defaults to `true`."
    },
    "manualExpanding": {
      "type": "boolean",
      "required": false,
      "description": "Enables manual row expansion. If this is set to `true`, `getExpandedRowModel` will not be used to expand rows and you would be expected to perform the expansion in your own data model. This is useful if you are doing server-side expansion."
    },
    "manualFiltering": {
      "type": "boolean",
      "required": false,
      "description": "Disables the `getFilteredRowModel` from being used to filter data. This may be useful if your table needs to dynamically support both client-side and server-side filtering."
    },
    "manualGrouping": {
      "type": "boolean",
      "required": false,
      "description": "Enables manual grouping. If this option is set to `true`, the table will not automatically group rows using `getGroupedRowModel()` and instead will expect you to manually group the rows before passing them to the table. This is useful if you are doing server-side grouping and aggregation."
    },
    "manualPagination": {
      "type": "boolean",
      "required": false,
      "description": "Enables manual pagination. If this option is set to `true`, the table will not automatically paginate rows using `getPaginationRowModel()` and instead will expect you to manually paginate the rows before passing them to the table. This is useful if you are doing server-side pagination and aggregation."
    },
    "manualSorting": {
      "type": "boolean",
      "required": false,
      "description": "Enables manual sorting for the table. If this is `true`, you will be expected to sort your data before it is passed to the table. This is useful if you are doing server-side sorting."
    },
    "maxLeafRowFilterDepth": {
      "type": "number",
      "required": false,
      "description": "By default, filtering is done for all rows (max depth of 100), no matter if they are root level parent rows or the child leaf rows of a parent row. Setting this option to `0` will cause filtering to only be applied to the root level parent rows, with all sub-rows remaining unfiltered. Similarly, setting this option to `1` will cause filtering to only be applied to child leaf rows 1 level deep, and so on.\n\nThis is useful for situations where you want a row's entire child hierarchy to be visible regardless of the applied filter."
    },
    "maxMultiSortColCount": {
      "type": "number",
      "required": false,
      "description": "Set a maximum number of columns that can be multi-sorted."
    },
    "mergeOptions": {
      "type": "(\n  defaultOptions: TableOptions<Data>,\n  options: Partial<TableOptions<Data>>,\n) => TableOptions<Data>",
      "required": false,
      "description": "This option is used to optionally implement the merging of table options."
    },
    "meta": {
      "type": "TableMeta<Data>",
      "required": false,
      "description": "You can pass any object to `options.meta` and access it anywhere the `table` is available via `table.options.meta`."
    },
    "onColumnFiltersChange": {
      "type": "OnChangeFn<ColumnFiltersState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.columnFilters` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table."
    },
    "onColumnOrderChange": {
      "type": "OnChangeFn<ColumnOrderState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.columnOrder` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table."
    },
    "onColumnPinningChange": {
      "type": "OnChangeFn<ColumnPinningState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.columnPinning` changes. This overrides the default internal state management, so you will also need to supply `state.columnPinning` from your own managed state."
    },
    "onColumnSizingChange": {
      "type": "OnChangeFn<ColumnSizingState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.columnSizing` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizing` from your own managed state."
    },
    "onColumnSizingInfoChange": {
      "type": "OnChangeFn<ColumnSizingInfoState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.columnSizingInfo` changes. This overrides the default internal state management, so you will also need to supply `state.columnSizingInfo` from your own managed state."
    },
    "onColumnVisibilityChange": {
      "type": "OnChangeFn<VisibilityState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.columnVisibility` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table."
    },
    "onExpandedChange": {
      "type": "OnChangeFn<ExpandedState>",
      "required": false,
      "description": "This function is called when the `expanded` table state changes. If a function is provided, you will be responsible for managing this state on your own. To pass the managed state back to the table, use the `tableOptions.state.expanded` option."
    },
    "onGlobalFilterChange": {
      "type": "OnChangeFn<any>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.globalFilter` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table."
    },
    "onGroupingChange": {
      "type": "OnChangeFn<GroupingState>",
      "required": false,
      "description": "If this function is provided, it will be called when the grouping state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.grouping` option."
    },
    "onPaginationChange": {
      "type": "OnChangeFn<PaginationState>",
      "required": false,
      "description": "If this function is provided, it will be called when the pagination state changes and you will be expected to manage the state yourself. You can pass the managed state back to the table via the `tableOptions.state.pagination` option."
    },
    "onRowPinningChange": {
      "type": "OnChangeFn<RowPinningState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.rowPinning` changes. This overrides the default internal state management, so you will also need to supply `state.rowPinning` from your own managed state."
    },
    "onRowSelectionChange": {
      "type": "OnChangeFn<RowSelectionState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.rowSelection` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table."
    },
    "onSelectedRowsChange": {
      "type": "(rows: string[]) => void",
      "required": false,
      "description": "Triggers whenever the row selection changes."
    },
    "onSortChange": {
      "type": "(columns: ColumnSort[]) => void",
      "required": false,
      "description": "Triggers when sort changed.\nUse incombination with `manualSortBy` to enable remote sorting."
    },
    "onSortingChange": {
      "type": "OnChangeFn<SortingState>",
      "required": false,
      "description": "If provided, this function will be called with an `updaterFn` when `state.sorting` changes. This overrides the default internal state management, so you will need to persist the state change either fully or partially outside of the table."
    },
    "onStateChange": {
      "type": "(updater: Updater<TableState>) => void",
      "required": false,
      "description": "The `onStateChange` option can be used to optionally listen to state changes within the table."
    },
    "pageCount": {
      "type": "number",
      "required": false,
      "description": "When manually controlling pagination, you should supply a total `pageCount` value to the table if you know it. If you do not know how many pages there are, you can set this to `-1`."
    },
    "paginateExpandedRows": {
      "type": "boolean",
      "required": false,
      "description": "If `true` expanded rows will be paginated along with the rest of the table (which means expanded rows may span multiple pages). If `false` expanded rows will not be considered for pagination (which means expanded rows will always render on their parents page. This also means more rows will be rendered than the set page size)"
    },
    "renderFallbackValue": {
      "type": "any",
      "required": false,
      "description": "Value used when the desired value is not found in the data."
    },
    "sortDescFirst": {
      "type": "boolean",
      "required": false,
      "description": "If `true`, all sorts will default to descending as their first toggle state."
    },
    "sortingFns": {
      "type": "Record<string, SortingFn<any>>",
      "required": false
    },
    "state": {
      "type": "Partial<TableState>",
      "required": false,
      "description": "The `state` option can be used to optionally _control_ part or all of the table state. The state you pass here will merge with and overwrite the internal automatically-managed state to produce the final state for the table. You can also listen to state changes via the `onStateChange` option.\n> Note: Any state passed in here will override both the internal state and any other `initialState` you provide."
    },
    "sx": {
      "type": "SystemStyleObject",
      "required": false,
      "description": "Table styles"
    }
  },
  "DataTableSort": {
    "header": { "type": "Header<Data, TValue>", "required": true }
  },
  "DataTableHeader": {
    "header": { "type": "Header<Data, TValue>", "required": true },
    "isSortable": { "type": "boolean", "required": false }
  }
}
